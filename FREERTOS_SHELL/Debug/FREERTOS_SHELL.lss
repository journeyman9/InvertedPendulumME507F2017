
FREERTOS_SHELL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00802000  00002256  000022ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001089  0080206e  0080206e  00002358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a279  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000566f  00000000  00000000  0000cab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f59  00000000  00000000  00012128  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ce8  00000000  00000000  00015084  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005bbc  00000000  00000000  00015d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000039ac  00000000  00000000  0001b928  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0001f2d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__ctors_end>
       4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
       8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
       c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      10:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      14:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      18:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      1c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      20:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      24:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      28:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      2c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      30:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      34:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      38:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      3c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      40:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      44:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      48:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      4c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      50:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      54:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      58:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      5c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      60:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      64:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__vector_25>
      68:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      6c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      70:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__vector_28>
      74:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      78:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      7c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      80:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      84:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      88:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      8c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      90:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      94:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      98:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      9c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      a0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      a4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      a8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      ac:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      b0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      b4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      b8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      bc:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      c0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      c4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      c8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      cc:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      d0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      d4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      d8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      dc:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__vector_55>
      e0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      e4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      e8:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__vector_58>
      ec:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      f0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      f4:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__vector_61>
      f8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      fc:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     100:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     104:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     108:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     10c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     110:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     114:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     118:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     11c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     120:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     124:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     128:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     12c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     130:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     134:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     138:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     13c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     140:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     144:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     148:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     14c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     150:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     154:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     158:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     15c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     160:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__vector_88>
     164:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     168:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     16c:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__vector_91>
     170:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     174:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     178:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     17c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     180:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     184:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     188:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     18c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     190:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     194:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     198:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     19c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1a0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1a4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1a8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1ac:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1b0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1b4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1b8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1bc:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1c0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1c4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1c8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1cc:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1d0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1d4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1d8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1dc:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__vector_119>
     1e0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1e4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1e8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1ec:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1f0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1f4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1f8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
     1fc:	66 0b       	sbc	r22, r22
     1fe:	69 0b       	sbc	r22, r25
     200:	6c 0b       	sbc	r22, r28
     202:	6f 0b       	sbc	r22, r31
     204:	72 0b       	sbc	r23, r18
     206:	75 0b       	sbc	r23, r21
     208:	77 0b       	sbc	r23, r23
     20a:	88 0b       	sbc	r24, r24
     20c:	90 0b       	sbc	r25, r16
     20e:	9a 0b       	sbc	r25, r26
     210:	98 0b       	sbc	r25, r24

00000212 <__trampolines_start>:
     212:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <_ZN14frt_text_queue14check_for_charEv>
     216:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <_ZN8emstream12clear_screenEv>
     21a:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <_ZN8emstream14check_for_charEv>
     21e:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <_ZN8emstreamlsE15ser_manipulator+0x62>
     222:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <_ZN8emstreamlsE15ser_manipulator+0x36>
     226:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <_ZN8emstreamlsE15ser_manipulator+0x2a>
     22a:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <_ZN5rs23214check_for_charEv>
     22e:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <_ZN8emstream12transmit_nowEv>
     232:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <_ZN8emstreamlsE15ser_manipulator+0x24>
     236:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <_ZN14frt_text_queue7putcharEc>
     23a:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <_ZN8emstreamlsE15ser_manipulator+0x1e>
     23e:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
     242:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <_ZN8emstreamlsE15ser_manipulator+0x30>
     246:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <_ZN8emstreamlsE15ser_manipulator+0x82>
     24a:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <_ZN8emstreamlsE15ser_manipulator+0x40>
     24e:	0c 94 b7 10 	jmp	0x216e	; 0x216e <_GLOBAL__sub_I_counter>
     252:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <_ZN8emstreamlsE15ser_manipulator+0x3c>
     256:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <_ZN5rs2327putcharEc>
     25a:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <_ZN8emstream13ready_to_sendEv>
     25e:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <_ZN8emstream7getcharEv>
     262:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <_ZN8emstreamlsE15ser_manipulator+0x72>
     266:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__cxa_pure_virtual>
     26a:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <_ZN5rs23212clear_screenEv>
     26e:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <_ZN5rs2327getcharEv>
     272:	0c 94 df 09 	jmp	0x13be	; 0x13be <_ZN14frt_text_queue7getcharEv>

00000276 <__ctors_start>:
     276:	b7 10       	cpse	r11, r7

00000278 <__ctors_end>:
     278:	11 24       	eor	r1, r1
     27a:	1f be       	out	0x3f, r1	; 63
     27c:	cf ef       	ldi	r28, 0xFF	; 255
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df e3       	ldi	r29, 0x3F	; 63
     282:	de bf       	out	0x3e, r29	; 62
     284:	00 e0       	ldi	r16, 0x00	; 0
     286:	0c bf       	out	0x3c, r16	; 60
     288:	18 be       	out	0x38, r1	; 56
     28a:	19 be       	out	0x39, r1	; 57
     28c:	1a be       	out	0x3a, r1	; 58
     28e:	1b be       	out	0x3b, r1	; 59

00000290 <__do_copy_data>:
     290:	10 e2       	ldi	r17, 0x20	; 32
     292:	a0 e0       	ldi	r26, 0x00	; 0
     294:	b0 e2       	ldi	r27, 0x20	; 32
     296:	e6 e5       	ldi	r30, 0x56	; 86
     298:	f2 e2       	ldi	r31, 0x22	; 34
     29a:	00 e0       	ldi	r16, 0x00	; 0
     29c:	0b bf       	out	0x3b, r16	; 59
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__do_copy_data+0x14>
     2a0:	07 90       	elpm	r0, Z+
     2a2:	0d 92       	st	X+, r0
     2a4:	ae 36       	cpi	r26, 0x6E	; 110
     2a6:	b1 07       	cpc	r27, r17
     2a8:	d9 f7       	brne	.-10     	; 0x2a0 <__do_copy_data+0x10>
     2aa:	1b be       	out	0x3b, r1	; 59

000002ac <__do_clear_bss>:
     2ac:	20 e3       	ldi	r18, 0x30	; 48
     2ae:	ae e6       	ldi	r26, 0x6E	; 110
     2b0:	b0 e2       	ldi	r27, 0x20	; 32
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <.do_clear_bss_start>

000002b4 <.do_clear_bss_loop>:
     2b4:	1d 92       	st	X+, r1

000002b6 <.do_clear_bss_start>:
     2b6:	a7 3f       	cpi	r26, 0xF7	; 247
     2b8:	b2 07       	cpc	r27, r18
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <.do_clear_bss_loop>

000002bc <__do_global_ctors>:
     2bc:	11 e0       	ldi	r17, 0x01	; 1
     2be:	cc e3       	ldi	r28, 0x3C	; 60
     2c0:	d1 e0       	ldi	r29, 0x01	; 1
     2c2:	00 e0       	ldi	r16, 0x00	; 0
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <__do_global_ctors+0x16>
     2c6:	21 97       	sbiw	r28, 0x01	; 1
     2c8:	01 09       	sbc	r16, r1
     2ca:	80 2f       	mov	r24, r16
     2cc:	fe 01       	movw	r30, r28
     2ce:	0e 94 c8 10 	call	0x2190	; 0x2190 <__tablejump2__>
     2d2:	cb 33       	cpi	r28, 0x3B	; 59
     2d4:	d1 07       	cpc	r29, r17
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	08 07       	cpc	r16, r24
     2da:	a9 f7       	brne	.-22     	; 0x2c6 <__do_global_ctors+0xa>
     2dc:	0e 94 2a 10 	call	0x2054	; 0x2054 <main>
     2e0:	0c 94 29 11 	jmp	0x2252	; 0x2252 <_exit>

000002e4 <__bad_interrupt>:
     2e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e8 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	ec 01       	movw	r28, r24
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     2f2:	0e 94 80 06 	call	0xd00	; 0xd00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     2f6:	80 91 6e 20 	lds	r24, 0x206E	; 0x80206e <__data_end>
     2fa:	81 11       	cpse	r24, r1
     2fc:	1d c0       	rjmp	.+58     	; 0x338 <pvPortMalloc+0x50>
		{
			prvHeapInit();
     2fe:	a3 e7       	ldi	r26, 0x73	; 115
     300:	b0 e2       	ldi	r27, 0x20	; 32
     302:	e7 e7       	ldi	r30, 0x77	; 119
     304:	f0 e2       	ldi	r31, 0x20	; 32
     306:	ed 93       	st	X+, r30
     308:	fc 93       	st	X, r31
     30a:	11 97       	sbiw	r26, 0x01	; 1
     30c:	12 96       	adiw	r26, 0x02	; 2
     30e:	1d 92       	st	X+, r1
     310:	1c 92       	st	X, r1
     312:	13 97       	sbiw	r26, 0x03	; 3
     314:	af e6       	ldi	r26, 0x6F	; 111
     316:	b0 e2       	ldi	r27, 0x20	; 32
     318:	8f ef       	ldi	r24, 0xFF	; 255
     31a:	9f e0       	ldi	r25, 0x0F	; 15
     31c:	12 96       	adiw	r26, 0x02	; 2
     31e:	8d 93       	st	X+, r24
     320:	9c 93       	st	X, r25
     322:	13 97       	sbiw	r26, 0x03	; 3
     324:	1d 92       	st	X+, r1
     326:	1c 92       	st	X, r1
     328:	11 97       	sbiw	r26, 0x01	; 1
     32a:	82 83       	std	Z+2, r24	; 0x02
     32c:	93 83       	std	Z+3, r25	; 0x03
     32e:	a0 83       	st	Z, r26
     330:	b1 83       	std	Z+1, r27	; 0x01
			xHeapHasBeenInitialised = pdTRUE;
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <__data_end>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     338:	20 97       	sbiw	r28, 0x00	; 0
     33a:	09 f4       	brne	.+2      	; 0x33e <pvPortMalloc+0x56>
     33c:	5f c0       	rjmp	.+190    	; 0x3fc <pvPortMalloc+0x114>
		{
			xWantedSize += heapSTRUCT_SIZE;
     33e:	9e 01       	movw	r18, r28
     340:	2b 5f       	subi	r18, 0xFB	; 251
     342:	3f 4f       	sbci	r19, 0xFF	; 255
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
     344:	24 96       	adiw	r28, 0x04	; 4
     346:	ce 3f       	cpi	r28, 0xFE	; 254
     348:	df 40       	sbci	r29, 0x0F	; 15
     34a:	08 f0       	brcs	.+2      	; 0x34e <pvPortMalloc+0x66>
     34c:	5a c0       	rjmp	.+180    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     34e:	e0 91 73 20 	lds	r30, 0x2073	; 0x802073 <xStart>
     352:	f0 91 74 20 	lds	r31, 0x2074	; 0x802074 <xStart+0x1>

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     356:	a3 e7       	ldi	r26, 0x73	; 115
     358:	b0 e2       	ldi	r27, 0x20	; 32
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
     35a:	02 c0       	rjmp	.+4      	; 0x360 <pvPortMalloc+0x78>
     35c:	df 01       	movw	r26, r30
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     35e:	fc 01       	movw	r30, r24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	93 81       	ldd	r25, Z+3	; 0x03
     364:	82 17       	cp	r24, r18
     366:	93 07       	cpc	r25, r19
     368:	20 f4       	brcc	.+8      	; 0x372 <pvPortMalloc+0x8a>
     36a:	80 81       	ld	r24, Z
     36c:	91 81       	ldd	r25, Z+1	; 0x01
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	a9 f7       	brne	.-22     	; 0x35c <pvPortMalloc+0x74>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     372:	c0 e2       	ldi	r28, 0x20	; 32
     374:	ef 36       	cpi	r30, 0x6F	; 111
     376:	fc 07       	cpc	r31, r28
     378:	09 f4       	brne	.+2      	; 0x37c <pvPortMalloc+0x94>
     37a:	46 c0       	rjmp	.+140    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     37c:	cd 91       	ld	r28, X+
     37e:	dc 91       	ld	r29, X
     380:	11 97       	sbiw	r26, 0x01	; 1
     382:	8e 01       	movw	r16, r28
     384:	0b 5f       	subi	r16, 0xFB	; 251
     386:	1f 4f       	sbci	r17, 0xFF	; 255

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     388:	80 81       	ld	r24, Z
     38a:	91 81       	ldd	r25, Z+1	; 0x01
     38c:	8d 93       	st	X+, r24
     38e:	9c 93       	st	X, r25

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     390:	82 81       	ldd	r24, Z+2	; 0x02
     392:	93 81       	ldd	r25, Z+3	; 0x03
     394:	82 1b       	sub	r24, r18
     396:	93 0b       	sbc	r25, r19
     398:	8b 30       	cpi	r24, 0x0B	; 11
     39a:	91 05       	cpc	r25, r1
     39c:	10 f1       	brcs	.+68     	; 0x3e2 <pvPortMalloc+0xfa>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
     39e:	bf 01       	movw	r22, r30
     3a0:	62 0f       	add	r22, r18
     3a2:	73 1f       	adc	r23, r19

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3a4:	db 01       	movw	r26, r22
     3a6:	12 96       	adiw	r26, 0x02	; 2
     3a8:	8d 93       	st	X+, r24
     3aa:	9c 93       	st	X, r25
     3ac:	13 97       	sbiw	r26, 0x03	; 3
					pxBlock->xBlockSize = xWantedSize;
     3ae:	22 83       	std	Z+2, r18	; 0x02
     3b0:	33 83       	std	Z+3, r19	; 0x03

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     3b2:	12 96       	adiw	r26, 0x02	; 2
     3b4:	4d 91       	ld	r20, X+
     3b6:	5c 91       	ld	r21, X
     3b8:	13 97       	sbiw	r26, 0x03	; 3
     3ba:	83 e7       	ldi	r24, 0x73	; 115
     3bc:	90 e2       	ldi	r25, 0x20	; 32
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <pvPortMalloc+0xda>
     3c0:	cd 01       	movw	r24, r26
     3c2:	ec 01       	movw	r28, r24
     3c4:	a8 81       	ld	r26, Y
     3c6:	b9 81       	ldd	r27, Y+1	; 0x01
     3c8:	12 96       	adiw	r26, 0x02	; 2
     3ca:	2d 91       	ld	r18, X+
     3cc:	3c 91       	ld	r19, X
     3ce:	13 97       	sbiw	r26, 0x03	; 3
     3d0:	24 17       	cp	r18, r20
     3d2:	35 07       	cpc	r19, r21
     3d4:	a8 f3       	brcs	.-22     	; 0x3c0 <pvPortMalloc+0xd8>
     3d6:	eb 01       	movw	r28, r22
     3d8:	a8 83       	st	Y, r26
     3da:	b9 83       	std	Y+1, r27	; 0x01
     3dc:	dc 01       	movw	r26, r24
     3de:	6d 93       	st	X+, r22
     3e0:	7c 93       	st	X, r23
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
     3e2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     3e6:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     3ea:	22 81       	ldd	r18, Z+2	; 0x02
     3ec:	33 81       	ldd	r19, Z+3	; 0x03
     3ee:	82 1b       	sub	r24, r18
     3f0:	93 0b       	sbc	r25, r19
     3f2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     3f6:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     3fa:	08 c0       	rjmp	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     3fc:	00 e0       	ldi	r16, 0x00	; 0
     3fe:	10 e0       	ldi	r17, 0x00	; 0
     400:	05 c0       	rjmp	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     402:	00 e0       	ldi	r16, 0x00	; 0
     404:	10 e0       	ldi	r17, 0x00	; 0
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	00 e0       	ldi	r16, 0x00	; 0
     40a:	10 e0       	ldi	r17, 0x00	; 0
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
     40c:	0e 94 87 07 	call	0xf0e	; 0xf0e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     410:	c8 01       	movw	r24, r16
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv )
     424:	00 97       	sbiw	r24, 0x00	; 0
     426:	41 f1       	breq	.+80     	; 0x478 <vPortFree+0x5c>
     428:	ec 01       	movw	r28, r24
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     42a:	8c 01       	movw	r16, r24
     42c:	05 50       	subi	r16, 0x05	; 5
     42e:	11 09       	sbc	r17, r1

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
     430:	0e 94 80 06 	call	0xd00	; 0xd00 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
     434:	f8 01       	movw	r30, r16
     436:	42 81       	ldd	r20, Z+2	; 0x02
     438:	53 81       	ldd	r21, Z+3	; 0x03
     43a:	a3 e7       	ldi	r26, 0x73	; 115
     43c:	b0 e2       	ldi	r27, 0x20	; 32
     43e:	01 c0       	rjmp	.+2      	; 0x442 <vPortFree+0x26>
     440:	df 01       	movw	r26, r30
     442:	ed 91       	ld	r30, X+
     444:	fc 91       	ld	r31, X
     446:	11 97       	sbiw	r26, 0x01	; 1
     448:	22 81       	ldd	r18, Z+2	; 0x02
     44a:	33 81       	ldd	r19, Z+3	; 0x03
     44c:	24 17       	cp	r18, r20
     44e:	35 07       	cpc	r19, r21
     450:	b8 f3       	brcs	.-18     	; 0x440 <vPortFree+0x24>
     452:	25 97       	sbiw	r28, 0x05	; 5
     454:	e8 83       	st	Y, r30
     456:	f9 83       	std	Y+1, r31	; 0x01
     458:	0d 93       	st	X+, r16
     45a:	1c 93       	st	X, r17
			xFreeBytesRemaining += pxLink->xBlockSize;
     45c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     460:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	9b 81       	ldd	r25, Y+3	; 0x03
     468:	82 0f       	add	r24, r18
     46a:	93 1f       	adc	r25, r19
     46c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     470:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
		}
		xTaskResumeAll();
     474:	0e 94 87 07 	call	0xf0e	; 0xf0e <xTaskResumeAll>
	}
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <vListInitialise>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     482:	fc 01       	movw	r30, r24
     484:	03 96       	adiw	r24, 0x03	; 3
     486:	81 83       	std	Z+1, r24	; 0x01
     488:	92 83       	std	Z+2, r25	; 0x02
     48a:	4f ef       	ldi	r20, 0xFF	; 255
     48c:	5f ef       	ldi	r21, 0xFF	; 255
     48e:	ba 01       	movw	r22, r20
     490:	43 83       	std	Z+3, r20	; 0x03
     492:	54 83       	std	Z+4, r21	; 0x04
     494:	65 83       	std	Z+5, r22	; 0x05
     496:	76 83       	std	Z+6, r23	; 0x06
     498:	87 83       	std	Z+7, r24	; 0x07
     49a:	90 87       	std	Z+8, r25	; 0x08
     49c:	81 87       	std	Z+9, r24	; 0x09
     49e:	92 87       	std	Z+10, r25	; 0x0a
     4a0:	10 82       	st	Z, r1
     4a2:	08 95       	ret

000004a4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	fc 01       	movw	r30, r24
     4aa:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     4ac:	21 81       	ldd	r18, Z+1	; 0x01
     4ae:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     4b0:	e9 01       	movw	r28, r18
     4b2:	8c 81       	ldd	r24, Y+4	; 0x04
     4b4:	9d 81       	ldd	r25, Y+5	; 0x05
     4b6:	14 96       	adiw	r26, 0x04	; 4
     4b8:	8d 93       	st	X+, r24
     4ba:	9c 93       	st	X, r25
     4bc:	15 97       	sbiw	r26, 0x05	; 5
	pxNewListItem->pxPrevious = pxList->pxIndex;
     4be:	81 81       	ldd	r24, Z+1	; 0x01
     4c0:	92 81       	ldd	r25, Z+2	; 0x02
     4c2:	16 96       	adiw	r26, 0x06	; 6
     4c4:	8d 93       	st	X+, r24
     4c6:	9c 93       	st	X, r25
     4c8:	17 97       	sbiw	r26, 0x07	; 7
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     4ca:	8c 81       	ldd	r24, Y+4	; 0x04
     4cc:	9d 81       	ldd	r25, Y+5	; 0x05
     4ce:	ec 01       	movw	r28, r24
     4d0:	6e 83       	std	Y+6, r22	; 0x06
     4d2:	7f 83       	std	Y+7, r23	; 0x07
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     4d4:	e9 01       	movw	r28, r18
     4d6:	6c 83       	std	Y+4, r22	; 0x04
     4d8:	7d 83       	std	Y+5, r23	; 0x05
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     4da:	61 83       	std	Z+1, r22	; 0x01
     4dc:	72 83       	std	Z+2, r23	; 0x02

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     4de:	1a 96       	adiw	r26, 0x0a	; 10
     4e0:	ed 93       	st	X+, r30
     4e2:	fc 93       	st	X, r31
     4e4:	1b 97       	sbiw	r26, 0x0b	; 11

	( pxList->uxNumberOfItems )++;
     4e6:	80 81       	ld	r24, Z
     4e8:	8f 5f       	subi	r24, 0xFF	; 255
     4ea:	80 83       	st	Z, r24
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     4fc:	08 81       	ld	r16, Y
     4fe:	19 81       	ldd	r17, Y+1	; 0x01
     500:	2a 81       	ldd	r18, Y+2	; 0x02
     502:	3b 81       	ldd	r19, Y+3	; 0x03
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     504:	0f 3f       	cpi	r16, 0xFF	; 255
     506:	4f ef       	ldi	r20, 0xFF	; 255
     508:	14 07       	cpc	r17, r20
     50a:	24 07       	cpc	r18, r20
     50c:	34 07       	cpc	r19, r20
     50e:	31 f4       	brne	.+12     	; 0x51c <vListInsert+0x2a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     510:	dc 01       	movw	r26, r24
     512:	19 96       	adiw	r26, 0x09	; 9
     514:	ed 91       	ld	r30, X+
     516:	fc 91       	ld	r31, X
     518:	1a 97       	sbiw	r26, 0x0a	; 10
     51a:	1f c0       	rjmp	.+62     	; 0x55a <vListInsert+0x68>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     51c:	fc 01       	movw	r30, r24
     51e:	33 96       	adiw	r30, 0x03	; 3
     520:	dc 01       	movw	r26, r24
     522:	17 96       	adiw	r26, 0x07	; 7
     524:	4d 91       	ld	r20, X+
     526:	5c 91       	ld	r21, X
     528:	18 97       	sbiw	r26, 0x08	; 8
     52a:	da 01       	movw	r26, r20
     52c:	4d 91       	ld	r20, X+
     52e:	5d 91       	ld	r21, X+
     530:	6d 91       	ld	r22, X+
     532:	7c 91       	ld	r23, X
     534:	04 17       	cp	r16, r20
     536:	15 07       	cpc	r17, r21
     538:	26 07       	cpc	r18, r22
     53a:	37 07       	cpc	r19, r23
     53c:	70 f0       	brcs	.+28     	; 0x55a <vListInsert+0x68>
     53e:	04 80       	ldd	r0, Z+4	; 0x04
     540:	f5 81       	ldd	r31, Z+5	; 0x05
     542:	e0 2d       	mov	r30, r0
     544:	a4 81       	ldd	r26, Z+4	; 0x04
     546:	b5 81       	ldd	r27, Z+5	; 0x05
     548:	4d 91       	ld	r20, X+
     54a:	5d 91       	ld	r21, X+
     54c:	6d 91       	ld	r22, X+
     54e:	7c 91       	ld	r23, X
     550:	04 17       	cp	r16, r20
     552:	15 07       	cpc	r17, r21
     554:	26 07       	cpc	r18, r22
     556:	37 07       	cpc	r19, r23
     558:	90 f7       	brcc	.-28     	; 0x53e <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     55a:	a4 81       	ldd	r26, Z+4	; 0x04
     55c:	b5 81       	ldd	r27, Z+5	; 0x05
     55e:	ac 83       	std	Y+4, r26	; 0x04
     560:	bd 83       	std	Y+5, r27	; 0x05
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     562:	16 96       	adiw	r26, 0x06	; 6
     564:	cd 93       	st	X+, r28
     566:	dc 93       	st	X, r29
     568:	17 97       	sbiw	r26, 0x07	; 7
	pxNewListItem->pxPrevious = pxIterator;
     56a:	ee 83       	std	Y+6, r30	; 0x06
     56c:	ff 83       	std	Y+7, r31	; 0x07
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     56e:	c4 83       	std	Z+4, r28	; 0x04
     570:	d5 83       	std	Z+5, r29	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     572:	8a 87       	std	Y+10, r24	; 0x0a
     574:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     576:	fc 01       	movw	r30, r24
     578:	20 81       	ld	r18, Z
     57a:	2f 5f       	subi	r18, 0xFF	; 255
     57c:	20 83       	st	Z, r18
}
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	08 95       	ret

00000588 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     588:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     58a:	a4 81       	ldd	r26, Z+4	; 0x04
     58c:	b5 81       	ldd	r27, Z+5	; 0x05
     58e:	86 81       	ldd	r24, Z+6	; 0x06
     590:	97 81       	ldd	r25, Z+7	; 0x07
     592:	16 96       	adiw	r26, 0x06	; 6
     594:	8d 93       	st	X+, r24
     596:	9c 93       	st	X, r25
     598:	17 97       	sbiw	r26, 0x07	; 7
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     59a:	a6 81       	ldd	r26, Z+6	; 0x06
     59c:	b7 81       	ldd	r27, Z+7	; 0x07
     59e:	84 81       	ldd	r24, Z+4	; 0x04
     5a0:	95 81       	ldd	r25, Z+5	; 0x05
     5a2:	14 96       	adiw	r26, 0x04	; 4
     5a4:	8d 93       	st	X+, r24
     5a6:	9c 93       	st	X, r25
     5a8:	15 97       	sbiw	r26, 0x05	; 5
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     5aa:	a2 85       	ldd	r26, Z+10	; 0x0a
     5ac:	b3 85       	ldd	r27, Z+11	; 0x0b

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     5ae:	11 96       	adiw	r26, 0x01	; 1
     5b0:	8d 91       	ld	r24, X+
     5b2:	9c 91       	ld	r25, X
     5b4:	12 97       	sbiw	r26, 0x02	; 2
     5b6:	e8 17       	cp	r30, r24
     5b8:	f9 07       	cpc	r31, r25
     5ba:	31 f4       	brne	.+12     	; 0x5c8 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     5bc:	86 81       	ldd	r24, Z+6	; 0x06
     5be:	97 81       	ldd	r25, Z+7	; 0x07
     5c0:	11 96       	adiw	r26, 0x01	; 1
     5c2:	8d 93       	st	X+, r24
     5c4:	9c 93       	st	X, r25
     5c6:	12 97       	sbiw	r26, 0x02	; 2
	}

	pxItemToRemove->pvContainer = NULL;
     5c8:	12 86       	std	Z+10, r1	; 0x0a
     5ca:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     5cc:	8c 91       	ld	r24, X
     5ce:	81 50       	subi	r24, 0x01	; 1
     5d0:	8c 93       	st	X, r24
     5d2:	08 95       	ret

000005d4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     5d4:	0f 92       	push	r0
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	0f 92       	push	r0
     5dc:	0b b6       	in	r0, 0x3b	; 59
     5de:	0f 92       	push	r0
     5e0:	0c b6       	in	r0, 0x3c	; 60
     5e2:	0f 92       	push	r0
     5e4:	1f 92       	push	r1
     5e6:	11 24       	eor	r1, r1
     5e8:	2f 92       	push	r2
     5ea:	3f 92       	push	r3
     5ec:	4f 92       	push	r4
     5ee:	5f 92       	push	r5
     5f0:	6f 92       	push	r6
     5f2:	7f 92       	push	r7
     5f4:	8f 92       	push	r8
     5f6:	9f 92       	push	r9
     5f8:	af 92       	push	r10
     5fa:	bf 92       	push	r11
     5fc:	cf 92       	push	r12
     5fe:	df 92       	push	r13
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	2f 93       	push	r18
     60a:	3f 93       	push	r19
     60c:	4f 93       	push	r20
     60e:	5f 93       	push	r21
     610:	6f 93       	push	r22
     612:	7f 93       	push	r23
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	af 93       	push	r26
     61a:	bf 93       	push	r27
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	ef 93       	push	r30
     622:	ff 93       	push	r31
     624:	a0 91 bb 30 	lds	r26, 0x30BB	; 0x8030bb <pxCurrentTCB>
     628:	b0 91 bc 30 	lds	r27, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
     62c:	0d b6       	in	r0, 0x3d	; 61
     62e:	0d 92       	st	X+, r0
     630:	0e b6       	in	r0, 0x3e	; 62
     632:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     634:	0e 94 09 08 	call	0x1012	; 0x1012 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     638:	a0 91 bb 30 	lds	r26, 0x30BB	; 0x8030bb <pxCurrentTCB>
     63c:	b0 91 bc 30 	lds	r27, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
     640:	cd 91       	ld	r28, X+
     642:	cd bf       	out	0x3d, r28	; 61
     644:	dd 91       	ld	r29, X+
     646:	de bf       	out	0x3e, r29	; 62
     648:	ff 91       	pop	r31
     64a:	ef 91       	pop	r30
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	bf 91       	pop	r27
     652:	af 91       	pop	r26
     654:	9f 91       	pop	r25
     656:	8f 91       	pop	r24
     658:	7f 91       	pop	r23
     65a:	6f 91       	pop	r22
     65c:	5f 91       	pop	r21
     65e:	4f 91       	pop	r20
     660:	3f 91       	pop	r19
     662:	2f 91       	pop	r18
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	bf 90       	pop	r11
     672:	af 90       	pop	r10
     674:	9f 90       	pop	r9
     676:	8f 90       	pop	r8
     678:	7f 90       	pop	r7
     67a:	6f 90       	pop	r6
     67c:	5f 90       	pop	r5
     67e:	4f 90       	pop	r4
     680:	3f 90       	pop	r3
     682:	2f 90       	pop	r2
     684:	1f 90       	pop	r1
     686:	0f 90       	pop	r0
     688:	0c be       	out	0x3c, r0	; 60
     68a:	0f 90       	pop	r0
     68c:	0b be       	out	0x3b, r0	; 59
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0

	asm volatile ( "ret" );
     694:	08 95       	ret

00000696 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	0f 92       	push	r0
     69e:	0b b6       	in	r0, 0x3b	; 59
     6a0:	0f 92       	push	r0
     6a2:	0c b6       	in	r0, 0x3c	; 60
     6a4:	0f 92       	push	r0
     6a6:	1f 92       	push	r1
     6a8:	11 24       	eor	r1, r1
     6aa:	2f 92       	push	r2
     6ac:	3f 92       	push	r3
     6ae:	4f 92       	push	r4
     6b0:	5f 92       	push	r5
     6b2:	6f 92       	push	r6
     6b4:	7f 92       	push	r7
     6b6:	8f 92       	push	r8
     6b8:	9f 92       	push	r9
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	2f 93       	push	r18
     6cc:	3f 93       	push	r19
     6ce:	4f 93       	push	r20
     6d0:	5f 93       	push	r21
     6d2:	6f 93       	push	r22
     6d4:	7f 93       	push	r23
     6d6:	8f 93       	push	r24
     6d8:	9f 93       	push	r25
     6da:	af 93       	push	r26
     6dc:	bf 93       	push	r27
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ef 93       	push	r30
     6e4:	ff 93       	push	r31
     6e6:	a0 91 bb 30 	lds	r26, 0x30BB	; 0x8030bb <pxCurrentTCB>
     6ea:	b0 91 bc 30 	lds	r27, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
     6ee:	0d b6       	in	r0, 0x3d	; 61
     6f0:	0d 92       	st	X+, r0
     6f2:	0e b6       	in	r0, 0x3e	; 62
     6f4:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     6f6:	0e 94 86 06 	call	0xd0c	; 0xd0c <vTaskIncrementTick>
	vTaskSwitchContext();
     6fa:	0e 94 09 08 	call	0x1012	; 0x1012 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     6fe:	a0 91 bb 30 	lds	r26, 0x30BB	; 0x8030bb <pxCurrentTCB>
     702:	b0 91 bc 30 	lds	r27, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
     706:	cd 91       	ld	r28, X+
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	dd 91       	ld	r29, X+
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	8f 90       	pop	r8
     73e:	7f 90       	pop	r7
     740:	6f 90       	pop	r6
     742:	5f 90       	pop	r5
     744:	4f 90       	pop	r4
     746:	3f 90       	pop	r3
     748:	2f 90       	pop	r2
     74a:	1f 90       	pop	r1
     74c:	0f 90       	pop	r0
     74e:	0c be       	out	0x3c, r0	; 60
     750:	0f 90       	pop	r0
     752:	0b be       	out	0x3b, r0	; 59
     754:	0f 90       	pop	r0
     756:	0f be       	out	0x3f, r0	; 63
     758:	0f 90       	pop	r0

	asm volatile ( "ret" );
     75a:	08 95       	ret

0000075c <__vector_55>:
void RT_VECT (void) __attribute__ ((signal, naked));
void RT_VECT (void)
{
	// For the preemptive scheduler, enable a context switch
	#if configUSE_PREEMPTION == 1
		vPortYieldFromTick ();
     75c:	0e 94 4b 03 	call	0x696	; 0x696 <vPortYieldFromTick>
		asm volatile ( "reti" );
     760:	18 95       	reti

00000762 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	ec 01       	movw	r28, r24
     768:	88 a1       	ldd	r24, Y+32	; 0x20
     76a:	81 11       	cpse	r24, r1
     76c:	0b c0       	rjmp	.+22     	; 0x784 <prvCopyDataToQueue+0x22>
     76e:	88 81       	ld	r24, Y
     770:	99 81       	ldd	r25, Y+1	; 0x01
     772:	89 2b       	or	r24, r25
     774:	e1 f5       	brne	.+120    	; 0x7ee <prvCopyDataToQueue+0x8c>
     776:	8a 81       	ldd	r24, Y+2	; 0x02
     778:	9b 81       	ldd	r25, Y+3	; 0x03
     77a:	0e 94 ab 09 	call	0x1356	; 0x1356 <vTaskPriorityDisinherit>
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	1b 82       	std	Y+3, r1	; 0x03
     782:	35 c0       	rjmp	.+106    	; 0x7ee <prvCopyDataToQueue+0x8c>
     784:	41 11       	cpse	r20, r1
     786:	17 c0       	rjmp	.+46     	; 0x7b6 <prvCopyDataToQueue+0x54>
     788:	48 2f       	mov	r20, r24
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	8c 81       	ldd	r24, Y+4	; 0x04
     78e:	9d 81       	ldd	r25, Y+5	; 0x05
     790:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <memcpy>
     794:	28 a1       	ldd	r18, Y+32	; 0x20
     796:	8c 81       	ldd	r24, Y+4	; 0x04
     798:	9d 81       	ldd	r25, Y+5	; 0x05
     79a:	82 0f       	add	r24, r18
     79c:	91 1d       	adc	r25, r1
     79e:	8c 83       	std	Y+4, r24	; 0x04
     7a0:	9d 83       	std	Y+5, r25	; 0x05
     7a2:	2a 81       	ldd	r18, Y+2	; 0x02
     7a4:	3b 81       	ldd	r19, Y+3	; 0x03
     7a6:	82 17       	cp	r24, r18
     7a8:	93 07       	cpc	r25, r19
     7aa:	08 f1       	brcs	.+66     	; 0x7ee <prvCopyDataToQueue+0x8c>
     7ac:	88 81       	ld	r24, Y
     7ae:	99 81       	ldd	r25, Y+1	; 0x01
     7b0:	8c 83       	std	Y+4, r24	; 0x04
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	1c c0       	rjmp	.+56     	; 0x7ee <prvCopyDataToQueue+0x8c>
     7b6:	48 2f       	mov	r20, r24
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	8e 81       	ldd	r24, Y+6	; 0x06
     7bc:	9f 81       	ldd	r25, Y+7	; 0x07
     7be:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <memcpy>
     7c2:	88 a1       	ldd	r24, Y+32	; 0x20
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	91 95       	neg	r25
     7c8:	81 95       	neg	r24
     7ca:	91 09       	sbc	r25, r1
     7cc:	2e 81       	ldd	r18, Y+6	; 0x06
     7ce:	3f 81       	ldd	r19, Y+7	; 0x07
     7d0:	28 0f       	add	r18, r24
     7d2:	39 1f       	adc	r19, r25
     7d4:	2e 83       	std	Y+6, r18	; 0x06
     7d6:	3f 83       	std	Y+7, r19	; 0x07
     7d8:	48 81       	ld	r20, Y
     7da:	59 81       	ldd	r21, Y+1	; 0x01
     7dc:	24 17       	cp	r18, r20
     7de:	35 07       	cpc	r19, r21
     7e0:	30 f4       	brcc	.+12     	; 0x7ee <prvCopyDataToQueue+0x8c>
     7e2:	2a 81       	ldd	r18, Y+2	; 0x02
     7e4:	3b 81       	ldd	r19, Y+3	; 0x03
     7e6:	82 0f       	add	r24, r18
     7e8:	93 1f       	adc	r25, r19
     7ea:	8e 83       	std	Y+6, r24	; 0x06
     7ec:	9f 83       	std	Y+7, r25	; 0x07
     7ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7f0:	8f 5f       	subi	r24, 0xFF	; 255
     7f2:	8e 8f       	std	Y+30, r24	; 0x1e
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <prvCopyDataFromQueue>:
     7fa:	fc 01       	movw	r30, r24
     7fc:	80 81       	ld	r24, Z
     7fe:	91 81       	ldd	r25, Z+1	; 0x01
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	a1 f0       	breq	.+40     	; 0x82c <prvCopyDataFromQueue+0x32>
     804:	40 a1       	ldd	r20, Z+32	; 0x20
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	26 81       	ldd	r18, Z+6	; 0x06
     80a:	37 81       	ldd	r19, Z+7	; 0x07
     80c:	24 0f       	add	r18, r20
     80e:	35 1f       	adc	r19, r21
     810:	26 83       	std	Z+6, r18	; 0x06
     812:	37 83       	std	Z+7, r19	; 0x07
     814:	a2 81       	ldd	r26, Z+2	; 0x02
     816:	b3 81       	ldd	r27, Z+3	; 0x03
     818:	2a 17       	cp	r18, r26
     81a:	3b 07       	cpc	r19, r27
     81c:	10 f0       	brcs	.+4      	; 0x822 <prvCopyDataFromQueue+0x28>
     81e:	86 83       	std	Z+6, r24	; 0x06
     820:	97 83       	std	Z+7, r25	; 0x07
     822:	cb 01       	movw	r24, r22
     824:	66 81       	ldd	r22, Z+6	; 0x06
     826:	77 81       	ldd	r23, Z+7	; 0x07
     828:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <memcpy>
     82c:	08 95       	ret

0000082e <prvUnlockQueue>:
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	ec 01       	movw	r28, r24
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	0f 92       	push	r0
     83e:	8a a1       	ldd	r24, Y+34	; 0x22
     840:	18 16       	cp	r1, r24
     842:	b4 f4       	brge	.+44     	; 0x870 <prvUnlockQueue+0x42>
     844:	8b 89       	ldd	r24, Y+19	; 0x13
     846:	81 11       	cpse	r24, r1
     848:	05 c0       	rjmp	.+10     	; 0x854 <prvUnlockQueue+0x26>
     84a:	12 c0       	rjmp	.+36     	; 0x870 <prvUnlockQueue+0x42>
     84c:	8b 89       	ldd	r24, Y+19	; 0x13
     84e:	81 11       	cpse	r24, r1
     850:	04 c0       	rjmp	.+8      	; 0x85a <prvUnlockQueue+0x2c>
     852:	0e c0       	rjmp	.+28     	; 0x870 <prvUnlockQueue+0x42>
     854:	8e 01       	movw	r16, r28
     856:	0d 5e       	subi	r16, 0xED	; 237
     858:	1f 4f       	sbci	r17, 0xFF	; 255
     85a:	c8 01       	movw	r24, r16
     85c:	0e 94 90 08 	call	0x1120	; 0x1120 <xTaskRemoveFromEventList>
     860:	81 11       	cpse	r24, r1
     862:	0e 94 4d 09 	call	0x129a	; 0x129a <vTaskMissedYield>
     866:	8a a1       	ldd	r24, Y+34	; 0x22
     868:	81 50       	subi	r24, 0x01	; 1
     86a:	8a a3       	std	Y+34, r24	; 0x22
     86c:	18 16       	cp	r1, r24
     86e:	74 f3       	brlt	.-36     	; 0x84c <prvUnlockQueue+0x1e>
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	8a a3       	std	Y+34, r24	; 0x22
     874:	0f 90       	pop	r0
     876:	0f be       	out	0x3f, r0	; 63
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	0f 92       	push	r0
     87e:	89 a1       	ldd	r24, Y+33	; 0x21
     880:	18 16       	cp	r1, r24
     882:	b4 f4       	brge	.+44     	; 0x8b0 <prvUnlockQueue+0x82>
     884:	88 85       	ldd	r24, Y+8	; 0x08
     886:	81 11       	cpse	r24, r1
     888:	05 c0       	rjmp	.+10     	; 0x894 <prvUnlockQueue+0x66>
     88a:	12 c0       	rjmp	.+36     	; 0x8b0 <prvUnlockQueue+0x82>
     88c:	88 85       	ldd	r24, Y+8	; 0x08
     88e:	81 11       	cpse	r24, r1
     890:	04 c0       	rjmp	.+8      	; 0x89a <prvUnlockQueue+0x6c>
     892:	0e c0       	rjmp	.+28     	; 0x8b0 <prvUnlockQueue+0x82>
     894:	8e 01       	movw	r16, r28
     896:	08 5f       	subi	r16, 0xF8	; 248
     898:	1f 4f       	sbci	r17, 0xFF	; 255
     89a:	c8 01       	movw	r24, r16
     89c:	0e 94 90 08 	call	0x1120	; 0x1120 <xTaskRemoveFromEventList>
     8a0:	81 11       	cpse	r24, r1
     8a2:	0e 94 4d 09 	call	0x129a	; 0x129a <vTaskMissedYield>
     8a6:	89 a1       	ldd	r24, Y+33	; 0x21
     8a8:	81 50       	subi	r24, 0x01	; 1
     8aa:	89 a3       	std	Y+33, r24	; 0x21
     8ac:	18 16       	cp	r1, r24
     8ae:	74 f3       	brlt	.-36     	; 0x88c <prvUnlockQueue+0x5e>
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	89 a3       	std	Y+33, r24	; 0x21
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <xQueueGenericReset>:
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	61 30       	cpi	r22, 0x01	; 1
     8ca:	59 f0       	breq	.+22     	; 0x8e2 <xQueueGenericReset+0x20>
     8cc:	fc 01       	movw	r30, r24
     8ce:	23 89       	ldd	r18, Z+19	; 0x13
     8d0:	30 85       	ldd	r19, Z+8	; 0x08
     8d2:	31 11       	cpse	r19, r1
     8d4:	2c c0       	rjmp	.+88     	; 0x92e <xQueueGenericReset+0x6c>
     8d6:	11 e0       	ldi	r17, 0x01	; 1
     8d8:	21 11       	cpse	r18, r1
     8da:	10 e0       	ldi	r17, 0x00	; 0
     8dc:	21 11       	cpse	r18, r1
     8de:	28 c0       	rjmp	.+80     	; 0x930 <xQueueGenericReset+0x6e>
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <xQueueGenericReset+0x22>
     8e2:	11 e0       	ldi	r17, 0x01	; 1
     8e4:	ec 01       	movw	r28, r24
     8e6:	48 81       	ld	r20, Y
     8e8:	59 81       	ldd	r21, Y+1	; 0x01
     8ea:	28 a1       	ldd	r18, Y+32	; 0x20
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	6f 8d       	ldd	r22, Y+31	; 0x1f
     8f0:	62 9f       	mul	r22, r18
     8f2:	c0 01       	movw	r24, r0
     8f4:	63 9f       	mul	r22, r19
     8f6:	90 0d       	add	r25, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	ba 01       	movw	r22, r20
     8fc:	68 0f       	add	r22, r24
     8fe:	79 1f       	adc	r23, r25
     900:	6a 83       	std	Y+2, r22	; 0x02
     902:	7b 83       	std	Y+3, r23	; 0x03
     904:	1e 8e       	std	Y+30, r1	; 0x1e
     906:	4c 83       	std	Y+4, r20	; 0x04
     908:	5d 83       	std	Y+5, r21	; 0x05
     90a:	82 1b       	sub	r24, r18
     90c:	93 0b       	sbc	r25, r19
     90e:	84 0f       	add	r24, r20
     910:	95 1f       	adc	r25, r21
     912:	8e 83       	std	Y+6, r24	; 0x06
     914:	9f 83       	std	Y+7, r25	; 0x07
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	89 a3       	std	Y+33, r24	; 0x21
     91a:	8a a3       	std	Y+34, r24	; 0x22
     91c:	ce 01       	movw	r24, r28
     91e:	08 96       	adiw	r24, 0x08	; 8
     920:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
     924:	ce 01       	movw	r24, r28
     926:	43 96       	adiw	r24, 0x13	; 19
     928:	0e 94 41 02 	call	0x482	; 0x482 <vListInitialise>
     92c:	01 c0       	rjmp	.+2      	; 0x930 <xQueueGenericReset+0x6e>
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	81 2f       	mov	r24, r17
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	08 95       	ret

0000093a <xQueueGenericCreate>:
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	88 23       	and	r24, r24
     944:	01 f1       	breq	.+64     	; 0x986 <xQueueGenericCreate+0x4c>
     946:	06 2f       	mov	r16, r22
     948:	18 2f       	mov	r17, r24
     94a:	83 e2       	ldi	r24, 0x23	; 35
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <pvPortMalloc>
     952:	ec 01       	movw	r28, r24
     954:	89 2b       	or	r24, r25
     956:	c9 f0       	breq	.+50     	; 0x98a <xQueueGenericCreate+0x50>
     958:	10 9f       	mul	r17, r16
     95a:	c0 01       	movw	r24, r0
     95c:	11 24       	eor	r1, r1
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	0e 94 74 01 	call	0x2e8	; 0x2e8 <pvPortMalloc>
     964:	88 83       	st	Y, r24
     966:	99 83       	std	Y+1, r25	; 0x01
     968:	89 2b       	or	r24, r25
     96a:	39 f0       	breq	.+14     	; 0x97a <xQueueGenericCreate+0x40>
     96c:	1f 8f       	std	Y+31, r17	; 0x1f
     96e:	08 a3       	std	Y+32, r16	; 0x20
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	ce 01       	movw	r24, r28
     974:	0e 94 61 04 	call	0x8c2	; 0x8c2 <xQueueGenericReset>
     978:	08 c0       	rjmp	.+16     	; 0x98a <xQueueGenericCreate+0x50>
     97a:	ce 01       	movw	r24, r28
     97c:	0e 94 0e 02 	call	0x41c	; 0x41c <vPortFree>
     980:	c0 e0       	ldi	r28, 0x00	; 0
     982:	d0 e0       	ldi	r29, 0x00	; 0
     984:	02 c0       	rjmp	.+4      	; 0x98a <xQueueGenericCreate+0x50>
     986:	c0 e0       	ldi	r28, 0x00	; 0
     988:	d0 e0       	ldi	r29, 0x00	; 0
     98a:	ce 01       	movw	r24, r28
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <xQueueGenericSend>:
     996:	af 92       	push	r10
     998:	bf 92       	push	r11
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	29 97       	sbiw	r28, 0x09	; 9
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	7c 01       	movw	r14, r24
     9b6:	5b 01       	movw	r10, r22
     9b8:	2e 83       	std	Y+6, r18	; 0x06
     9ba:	3f 83       	std	Y+7, r19	; 0x07
     9bc:	48 87       	std	Y+8, r20	; 0x08
     9be:	59 87       	std	Y+9, r21	; 0x09
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	6c 01       	movw	r12, r24
     9c4:	88 e0       	ldi	r24, 0x08	; 8
     9c6:	c8 0e       	add	r12, r24
     9c8:	d1 1c       	adc	r13, r1
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	0f 92       	push	r0
     9d0:	f7 01       	movw	r30, r14
     9d2:	96 8d       	ldd	r25, Z+30	; 0x1e
     9d4:	87 8d       	ldd	r24, Z+31	; 0x1f
     9d6:	98 17       	cp	r25, r24
     9d8:	a8 f4       	brcc	.+42     	; 0xa04 <xQueueGenericSend+0x6e>
     9da:	40 2f       	mov	r20, r16
     9dc:	b5 01       	movw	r22, r10
     9de:	c7 01       	movw	r24, r14
     9e0:	0e 94 b1 03 	call	0x762	; 0x762 <prvCopyDataToQueue>
     9e4:	f7 01       	movw	r30, r14
     9e6:	83 89       	ldd	r24, Z+19	; 0x13
     9e8:	88 23       	and	r24, r24
     9ea:	41 f0       	breq	.+16     	; 0x9fc <xQueueGenericSend+0x66>
     9ec:	c7 01       	movw	r24, r14
     9ee:	43 96       	adiw	r24, 0x13	; 19
     9f0:	0e 94 90 08 	call	0x1120	; 0x1120 <xTaskRemoveFromEventList>
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	11 f4       	brne	.+4      	; 0x9fc <xQueueGenericSend+0x66>
     9f8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <vPortYield>
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	56 c0       	rjmp	.+172    	; 0xab0 <xQueueGenericSend+0x11a>
     a04:	8e 81       	ldd	r24, Y+6	; 0x06
     a06:	9f 81       	ldd	r25, Y+7	; 0x07
     a08:	a8 85       	ldd	r26, Y+8	; 0x08
     a0a:	b9 85       	ldd	r27, Y+9	; 0x09
     a0c:	89 2b       	or	r24, r25
     a0e:	8a 2b       	or	r24, r26
     a10:	8b 2b       	or	r24, r27
     a12:	21 f4       	brne	.+8      	; 0xa1c <xQueueGenericSend+0x86>
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	4a c0       	rjmp	.+148    	; 0xab0 <xQueueGenericSend+0x11a>
     a1c:	11 11       	cpse	r17, r1
     a1e:	05 c0       	rjmp	.+10     	; 0xa2a <xQueueGenericSend+0x94>
     a20:	ce 01       	movw	r24, r28
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	0e 94 cf 08 	call	0x119e	; 0x119e <vTaskSetTimeOutState>
     a28:	11 e0       	ldi	r17, 0x01	; 1
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0e 94 80 06 	call	0xd00	; 0xd00 <vTaskSuspendAll>
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	0f 92       	push	r0
     a38:	f7 01       	movw	r30, r14
     a3a:	81 a1       	ldd	r24, Z+33	; 0x21
     a3c:	8f 3f       	cpi	r24, 0xFF	; 255
     a3e:	09 f4       	brne	.+2      	; 0xa42 <xQueueGenericSend+0xac>
     a40:	11 a2       	std	Z+33, r1	; 0x21
     a42:	f7 01       	movw	r30, r14
     a44:	82 a1       	ldd	r24, Z+34	; 0x22
     a46:	8f 3f       	cpi	r24, 0xFF	; 255
     a48:	09 f4       	brne	.+2      	; 0xa4c <xQueueGenericSend+0xb6>
     a4a:	12 a2       	std	Z+34, r1	; 0x22
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	be 01       	movw	r22, r28
     a52:	6a 5f       	subi	r22, 0xFA	; 250
     a54:	7f 4f       	sbci	r23, 0xFF	; 255
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <xTaskCheckForTimeOut>
     a5e:	81 11       	cpse	r24, r1
     a60:	21 c0       	rjmp	.+66     	; 0xaa4 <xQueueGenericSend+0x10e>
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	0f 92       	push	r0
     a68:	f7 01       	movw	r30, r14
     a6a:	96 8d       	ldd	r25, Z+30	; 0x1e
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	87 8d       	ldd	r24, Z+31	; 0x1f
     a72:	98 13       	cpse	r25, r24
     a74:	11 c0       	rjmp	.+34     	; 0xa98 <xQueueGenericSend+0x102>
     a76:	4e 81       	ldd	r20, Y+6	; 0x06
     a78:	5f 81       	ldd	r21, Y+7	; 0x07
     a7a:	68 85       	ldd	r22, Y+8	; 0x08
     a7c:	79 85       	ldd	r23, Y+9	; 0x09
     a7e:	c6 01       	movw	r24, r12
     a80:	0e 94 66 08 	call	0x10cc	; 0x10cc <vTaskPlaceOnEventList>
     a84:	c7 01       	movw	r24, r14
     a86:	0e 94 17 04 	call	0x82e	; 0x82e <prvUnlockQueue>
     a8a:	0e 94 87 07 	call	0xf0e	; 0xf0e <xTaskResumeAll>
     a8e:	81 11       	cpse	r24, r1
     a90:	9c cf       	rjmp	.-200    	; 0x9ca <xQueueGenericSend+0x34>
     a92:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <vPortYield>
     a96:	99 cf       	rjmp	.-206    	; 0x9ca <xQueueGenericSend+0x34>
     a98:	c7 01       	movw	r24, r14
     a9a:	0e 94 17 04 	call	0x82e	; 0x82e <prvUnlockQueue>
     a9e:	0e 94 87 07 	call	0xf0e	; 0xf0e <xTaskResumeAll>
     aa2:	93 cf       	rjmp	.-218    	; 0x9ca <xQueueGenericSend+0x34>
     aa4:	c7 01       	movw	r24, r14
     aa6:	0e 94 17 04 	call	0x82e	; 0x82e <prvUnlockQueue>
     aaa:	0e 94 87 07 	call	0xf0e	; 0xf0e <xTaskResumeAll>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	29 96       	adiw	r28, 0x09	; 9
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	bf 90       	pop	r11
     ac8:	af 90       	pop	r10
     aca:	08 95       	ret

00000acc <xQueueGenericReceive>:
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	29 97       	sbiw	r28, 0x09	; 9
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	7c 01       	movw	r14, r24
     aec:	5b 01       	movw	r10, r22
     aee:	2e 83       	std	Y+6, r18	; 0x06
     af0:	3f 83       	std	Y+7, r19	; 0x07
     af2:	48 87       	std	Y+8, r20	; 0x08
     af4:	59 87       	std	Y+9, r21	; 0x09
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	6c 01       	movw	r12, r24
     afa:	83 e1       	ldi	r24, 0x13	; 19
     afc:	c8 0e       	add	r12, r24
     afe:	d1 1c       	adc	r13, r1
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	0f 92       	push	r0
     b06:	f7 01       	movw	r30, r14
     b08:	86 8d       	ldd	r24, Z+30	; 0x1e
     b0a:	88 23       	and	r24, r24
     b0c:	99 f1       	breq	.+102    	; 0xb74 <xQueueGenericReceive+0xa8>
     b0e:	c6 80       	ldd	r12, Z+6	; 0x06
     b10:	d7 80       	ldd	r13, Z+7	; 0x07
     b12:	b5 01       	movw	r22, r10
     b14:	c7 01       	movw	r24, r14
     b16:	0e 94 fd 03 	call	0x7fa	; 0x7fa <prvCopyDataFromQueue>
     b1a:	01 11       	cpse	r16, r1
     b1c:	1a c0       	rjmp	.+52     	; 0xb52 <xQueueGenericReceive+0x86>
     b1e:	f7 01       	movw	r30, r14
     b20:	86 8d       	ldd	r24, Z+30	; 0x1e
     b22:	81 50       	subi	r24, 0x01	; 1
     b24:	86 8f       	std	Z+30, r24	; 0x1e
     b26:	80 81       	ld	r24, Z
     b28:	91 81       	ldd	r25, Z+1	; 0x01
     b2a:	89 2b       	or	r24, r25
     b2c:	29 f4       	brne	.+10     	; 0xb38 <xQueueGenericReceive+0x6c>
     b2e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <xTaskGetCurrentTaskHandle>
     b32:	f7 01       	movw	r30, r14
     b34:	82 83       	std	Z+2, r24	; 0x02
     b36:	93 83       	std	Z+3, r25	; 0x03
     b38:	f7 01       	movw	r30, r14
     b3a:	80 85       	ldd	r24, Z+8	; 0x08
     b3c:	88 23       	and	r24, r24
     b3e:	b1 f0       	breq	.+44     	; 0xb6c <xQueueGenericReceive+0xa0>
     b40:	c7 01       	movw	r24, r14
     b42:	08 96       	adiw	r24, 0x08	; 8
     b44:	0e 94 90 08 	call	0x1120	; 0x1120 <xTaskRemoveFromEventList>
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	81 f4       	brne	.+32     	; 0xb6c <xQueueGenericReceive+0xa0>
     b4c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <vPortYield>
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <xQueueGenericReceive+0xa0>
     b52:	f7 01       	movw	r30, r14
     b54:	c6 82       	std	Z+6, r12	; 0x06
     b56:	d7 82       	std	Z+7, r13	; 0x07
     b58:	83 89       	ldd	r24, Z+19	; 0x13
     b5a:	88 23       	and	r24, r24
     b5c:	39 f0       	breq	.+14     	; 0xb6c <xQueueGenericReceive+0xa0>
     b5e:	c7 01       	movw	r24, r14
     b60:	43 96       	adiw	r24, 0x13	; 19
     b62:	0e 94 90 08 	call	0x1120	; 0x1120 <xTaskRemoveFromEventList>
     b66:	81 11       	cpse	r24, r1
     b68:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <vPortYield>
     b6c:	0f 90       	pop	r0
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	62 c0       	rjmp	.+196    	; 0xc38 <xQueueGenericReceive+0x16c>
     b74:	8e 81       	ldd	r24, Y+6	; 0x06
     b76:	9f 81       	ldd	r25, Y+7	; 0x07
     b78:	a8 85       	ldd	r26, Y+8	; 0x08
     b7a:	b9 85       	ldd	r27, Y+9	; 0x09
     b7c:	89 2b       	or	r24, r25
     b7e:	8a 2b       	or	r24, r26
     b80:	8b 2b       	or	r24, r27
     b82:	21 f4       	brne	.+8      	; 0xb8c <xQueueGenericReceive+0xc0>
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	56 c0       	rjmp	.+172    	; 0xc38 <xQueueGenericReceive+0x16c>
     b8c:	11 11       	cpse	r17, r1
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <xQueueGenericReceive+0xce>
     b90:	ce 01       	movw	r24, r28
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	0e 94 cf 08 	call	0x119e	; 0x119e <vTaskSetTimeOutState>
     b98:	11 e0       	ldi	r17, 0x01	; 1
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0e 94 80 06 	call	0xd00	; 0xd00 <vTaskSuspendAll>
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	0f 92       	push	r0
     ba8:	f7 01       	movw	r30, r14
     baa:	81 a1       	ldd	r24, Z+33	; 0x21
     bac:	8f 3f       	cpi	r24, 0xFF	; 255
     bae:	09 f4       	brne	.+2      	; 0xbb2 <xQueueGenericReceive+0xe6>
     bb0:	11 a2       	std	Z+33, r1	; 0x21
     bb2:	f7 01       	movw	r30, r14
     bb4:	82 a1       	ldd	r24, Z+34	; 0x22
     bb6:	8f 3f       	cpi	r24, 0xFF	; 255
     bb8:	09 f4       	brne	.+2      	; 0xbbc <xQueueGenericReceive+0xf0>
     bba:	12 a2       	std	Z+34, r1	; 0x22
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	be 01       	movw	r22, r28
     bc2:	6a 5f       	subi	r22, 0xFA	; 250
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <xTaskCheckForTimeOut>
     bce:	81 11       	cpse	r24, r1
     bd0:	2d c0       	rjmp	.+90     	; 0xc2c <xQueueGenericReceive+0x160>
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	0f 92       	push	r0
     bd8:	f7 01       	movw	r30, r14
     bda:	86 8d       	ldd	r24, Z+30	; 0x1e
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	81 11       	cpse	r24, r1
     be2:	1e c0       	rjmp	.+60     	; 0xc20 <xQueueGenericReceive+0x154>
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	89 2b       	or	r24, r25
     bea:	49 f4       	brne	.+18     	; 0xbfe <xQueueGenericReceive+0x132>
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	0f 92       	push	r0
     bf2:	82 81       	ldd	r24, Z+2	; 0x02
     bf4:	93 81       	ldd	r25, Z+3	; 0x03
     bf6:	0e 94 56 09 	call	0x12ac	; 0x12ac <vTaskPriorityInherit>
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	4e 81       	ldd	r20, Y+6	; 0x06
     c00:	5f 81       	ldd	r21, Y+7	; 0x07
     c02:	68 85       	ldd	r22, Y+8	; 0x08
     c04:	79 85       	ldd	r23, Y+9	; 0x09
     c06:	c6 01       	movw	r24, r12
     c08:	0e 94 66 08 	call	0x10cc	; 0x10cc <vTaskPlaceOnEventList>
     c0c:	c7 01       	movw	r24, r14
     c0e:	0e 94 17 04 	call	0x82e	; 0x82e <prvUnlockQueue>
     c12:	0e 94 87 07 	call	0xf0e	; 0xf0e <xTaskResumeAll>
     c16:	81 11       	cpse	r24, r1
     c18:	73 cf       	rjmp	.-282    	; 0xb00 <xQueueGenericReceive+0x34>
     c1a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <vPortYield>
     c1e:	70 cf       	rjmp	.-288    	; 0xb00 <xQueueGenericReceive+0x34>
     c20:	c7 01       	movw	r24, r14
     c22:	0e 94 17 04 	call	0x82e	; 0x82e <prvUnlockQueue>
     c26:	0e 94 87 07 	call	0xf0e	; 0xf0e <xTaskResumeAll>
     c2a:	6a cf       	rjmp	.-300    	; 0xb00 <xQueueGenericReceive+0x34>
     c2c:	c7 01       	movw	r24, r14
     c2e:	0e 94 17 04 	call	0x82e	; 0x82e <prvUnlockQueue>
     c32:	0e 94 87 07 	call	0xf0e	; 0xf0e <xTaskResumeAll>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	29 96       	adiw	r28, 0x09	; 9
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	08 95       	ret

00000c54 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
     c5a:	fc 01       	movw	r30, r24
     c5c:	86 8d       	ldd	r24, Z+30	; 0x1e
	taskEXIT_CRITICAL();
     c5e:	0f 90       	pop	r0
     c60:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
     c62:	08 95       	ret

00000c64 <prvAddCurrentTaskToDelayedList>:
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
     c64:	cf 92       	push	r12
     c66:	df 92       	push	r13
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	6b 01       	movw	r12, r22
     c6e:	7c 01       	movw	r14, r24
     c70:	e0 91 bb 30 	lds	r30, 0x30BB	; 0x8030bb <pxCurrentTCB>
     c74:	f0 91 bc 30 	lds	r31, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
     c78:	62 83       	std	Z+2, r22	; 0x02
     c7a:	73 83       	std	Z+3, r23	; 0x03
     c7c:	84 83       	std	Z+4, r24	; 0x04
     c7e:	95 83       	std	Z+5, r25	; 0x05
     c80:	80 91 7b 30 	lds	r24, 0x307B	; 0x80307b <xTickCount>
     c84:	90 91 7c 30 	lds	r25, 0x307C	; 0x80307c <xTickCount+0x1>
     c88:	a0 91 7d 30 	lds	r26, 0x307D	; 0x80307d <xTickCount+0x2>
     c8c:	b0 91 7e 30 	lds	r27, 0x307E	; 0x80307e <xTickCount+0x3>
     c90:	c8 16       	cp	r12, r24
     c92:	d9 06       	cpc	r13, r25
     c94:	ea 06       	cpc	r14, r26
     c96:	fb 06       	cpc	r15, r27
     c98:	68 f4       	brcc	.+26     	; 0xcb4 <prvAddCurrentTaskToDelayedList+0x50>
     c9a:	60 91 bb 30 	lds	r22, 0x30BB	; 0x8030bb <pxCurrentTCB>
     c9e:	70 91 bc 30 	lds	r23, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
     ca2:	80 91 8b 30 	lds	r24, 0x308B	; 0x80308b <pxOverflowDelayedTaskList>
     ca6:	90 91 8c 30 	lds	r25, 0x308C	; 0x80308c <pxOverflowDelayedTaskList+0x1>
     caa:	6e 5f       	subi	r22, 0xFE	; 254
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	0e 94 79 02 	call	0x4f2	; 0x4f2 <vListInsert>
     cb2:	21 c0       	rjmp	.+66     	; 0xcf6 <prvAddCurrentTaskToDelayedList+0x92>
     cb4:	60 91 bb 30 	lds	r22, 0x30BB	; 0x8030bb <pxCurrentTCB>
     cb8:	70 91 bc 30 	lds	r23, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
     cbc:	80 91 8d 30 	lds	r24, 0x308D	; 0x80308d <pxDelayedTaskList>
     cc0:	90 91 8e 30 	lds	r25, 0x308E	; 0x80308e <pxDelayedTaskList+0x1>
     cc4:	6e 5f       	subi	r22, 0xFE	; 254
     cc6:	7f 4f       	sbci	r23, 0xFF	; 255
     cc8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <vListInsert>
     ccc:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
     cd0:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
     cd4:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
     cd8:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
     cdc:	c8 16       	cp	r12, r24
     cde:	d9 06       	cpc	r13, r25
     ce0:	ea 06       	cpc	r14, r26
     ce2:	fb 06       	cpc	r15, r27
     ce4:	40 f4       	brcc	.+16     	; 0xcf6 <prvAddCurrentTaskToDelayedList+0x92>
     ce6:	c0 92 02 20 	sts	0x2002, r12	; 0x802002 <xNextTaskUnblockTime>
     cea:	d0 92 03 20 	sts	0x2003, r13	; 0x802003 <xNextTaskUnblockTime+0x1>
     cee:	e0 92 04 20 	sts	0x2004, r14	; 0x802004 <xNextTaskUnblockTime+0x2>
     cf2:	f0 92 05 20 	sts	0x2005, r15	; 0x802005 <xNextTaskUnblockTime+0x3>
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	08 95       	ret

00000d00 <vTaskSuspendAll>:
     d00:	80 91 79 30 	lds	r24, 0x3079	; 0x803079 <uxSchedulerSuspended>
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	80 93 79 30 	sts	0x3079, r24	; 0x803079 <uxSchedulerSuspended>
     d0a:	08 95       	ret

00000d0c <vTaskIncrementTick>:
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	80 91 79 30 	lds	r24, 0x3079	; 0x803079 <uxSchedulerSuspended>
     d1a:	81 11       	cpse	r24, r1
     d1c:	ed c0       	rjmp	.+474    	; 0xef8 <vTaskIncrementTick+0x1ec>
     d1e:	80 91 7b 30 	lds	r24, 0x307B	; 0x80307b <xTickCount>
     d22:	90 91 7c 30 	lds	r25, 0x307C	; 0x80307c <xTickCount+0x1>
     d26:	a0 91 7d 30 	lds	r26, 0x307D	; 0x80307d <xTickCount+0x2>
     d2a:	b0 91 7e 30 	lds	r27, 0x307E	; 0x80307e <xTickCount+0x3>
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	a1 1d       	adc	r26, r1
     d32:	b1 1d       	adc	r27, r1
     d34:	80 93 7b 30 	sts	0x307B, r24	; 0x80307b <xTickCount>
     d38:	90 93 7c 30 	sts	0x307C, r25	; 0x80307c <xTickCount+0x1>
     d3c:	a0 93 7d 30 	sts	0x307D, r26	; 0x80307d <xTickCount+0x2>
     d40:	b0 93 7e 30 	sts	0x307E, r27	; 0x80307e <xTickCount+0x3>
     d44:	80 91 7b 30 	lds	r24, 0x307B	; 0x80307b <xTickCount>
     d48:	90 91 7c 30 	lds	r25, 0x307C	; 0x80307c <xTickCount+0x1>
     d4c:	a0 91 7d 30 	lds	r26, 0x307D	; 0x80307d <xTickCount+0x2>
     d50:	b0 91 7e 30 	lds	r27, 0x307E	; 0x80307e <xTickCount+0x3>
     d54:	89 2b       	or	r24, r25
     d56:	8a 2b       	or	r24, r26
     d58:	8b 2b       	or	r24, r27
     d5a:	f1 f5       	brne	.+124    	; 0xdd8 <vTaskIncrementTick+0xcc>
     d5c:	80 91 8d 30 	lds	r24, 0x308D	; 0x80308d <pxDelayedTaskList>
     d60:	90 91 8e 30 	lds	r25, 0x308E	; 0x80308e <pxDelayedTaskList+0x1>
     d64:	20 91 8b 30 	lds	r18, 0x308B	; 0x80308b <pxOverflowDelayedTaskList>
     d68:	30 91 8c 30 	lds	r19, 0x308C	; 0x80308c <pxOverflowDelayedTaskList+0x1>
     d6c:	20 93 8d 30 	sts	0x308D, r18	; 0x80308d <pxDelayedTaskList>
     d70:	30 93 8e 30 	sts	0x308E, r19	; 0x80308e <pxDelayedTaskList+0x1>
     d74:	80 93 8b 30 	sts	0x308B, r24	; 0x80308b <pxOverflowDelayedTaskList>
     d78:	90 93 8c 30 	sts	0x308C, r25	; 0x80308c <pxOverflowDelayedTaskList+0x1>
     d7c:	80 91 76 30 	lds	r24, 0x3076	; 0x803076 <xNumOfOverflows>
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 93 76 30 	sts	0x3076, r24	; 0x803076 <xNumOfOverflows>
     d86:	e0 91 8d 30 	lds	r30, 0x308D	; 0x80308d <pxDelayedTaskList>
     d8a:	f0 91 8e 30 	lds	r31, 0x308E	; 0x80308e <pxDelayedTaskList+0x1>
     d8e:	80 81       	ld	r24, Z
     d90:	81 11       	cpse	r24, r1
     d92:	0c c0       	rjmp	.+24     	; 0xdac <vTaskIncrementTick+0xa0>
     d94:	8f ef       	ldi	r24, 0xFF	; 255
     d96:	9f ef       	ldi	r25, 0xFF	; 255
     d98:	dc 01       	movw	r26, r24
     d9a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
     d9e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
     da2:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
     da6:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
     daa:	16 c0       	rjmp	.+44     	; 0xdd8 <vTaskIncrementTick+0xcc>
     dac:	e0 91 8d 30 	lds	r30, 0x308D	; 0x80308d <pxDelayedTaskList>
     db0:	f0 91 8e 30 	lds	r31, 0x308E	; 0x80308e <pxDelayedTaskList+0x1>
     db4:	07 80       	ldd	r0, Z+7	; 0x07
     db6:	f0 85       	ldd	r31, Z+8	; 0x08
     db8:	e0 2d       	mov	r30, r0
     dba:	00 84       	ldd	r0, Z+8	; 0x08
     dbc:	f1 85       	ldd	r31, Z+9	; 0x09
     dbe:	e0 2d       	mov	r30, r0
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	a4 81       	ldd	r26, Z+4	; 0x04
     dc6:	b5 81       	ldd	r27, Z+5	; 0x05
     dc8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
     dcc:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
     dd0:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
     dd4:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
     dd8:	40 91 7b 30 	lds	r20, 0x307B	; 0x80307b <xTickCount>
     ddc:	50 91 7c 30 	lds	r21, 0x307C	; 0x80307c <xTickCount+0x1>
     de0:	60 91 7d 30 	lds	r22, 0x307D	; 0x80307d <xTickCount+0x2>
     de4:	70 91 7e 30 	lds	r23, 0x307E	; 0x80307e <xTickCount+0x3>
     de8:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <xNextTaskUnblockTime>
     dec:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <xNextTaskUnblockTime+0x1>
     df0:	a0 91 04 20 	lds	r26, 0x2004	; 0x802004 <xNextTaskUnblockTime+0x2>
     df4:	b0 91 05 20 	lds	r27, 0x2005	; 0x802005 <xNextTaskUnblockTime+0x3>
     df8:	48 17       	cp	r20, r24
     dfa:	59 07       	cpc	r21, r25
     dfc:	6a 07       	cpc	r22, r26
     dfe:	7b 07       	cpc	r23, r27
     e00:	08 f4       	brcc	.+2      	; 0xe04 <vTaskIncrementTick+0xf8>
     e02:	7f c0       	rjmp	.+254    	; 0xf02 <vTaskIncrementTick+0x1f6>
     e04:	e0 91 8d 30 	lds	r30, 0x308D	; 0x80308d <pxDelayedTaskList>
     e08:	f0 91 8e 30 	lds	r31, 0x308E	; 0x80308e <pxDelayedTaskList+0x1>
     e0c:	80 81       	ld	r24, Z
     e0e:	88 23       	and	r24, r24
     e10:	f9 f0       	breq	.+62     	; 0xe50 <vTaskIncrementTick+0x144>
     e12:	e0 91 8d 30 	lds	r30, 0x308D	; 0x80308d <pxDelayedTaskList>
     e16:	f0 91 8e 30 	lds	r31, 0x308E	; 0x80308e <pxDelayedTaskList+0x1>
     e1a:	07 80       	ldd	r0, Z+7	; 0x07
     e1c:	f0 85       	ldd	r31, Z+8	; 0x08
     e1e:	e0 2d       	mov	r30, r0
     e20:	c0 85       	ldd	r28, Z+8	; 0x08
     e22:	d1 85       	ldd	r29, Z+9	; 0x09
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	9b 81       	ldd	r25, Y+3	; 0x03
     e28:	ac 81       	ldd	r26, Y+4	; 0x04
     e2a:	bd 81       	ldd	r27, Y+5	; 0x05
     e2c:	40 91 7b 30 	lds	r20, 0x307B	; 0x80307b <xTickCount>
     e30:	50 91 7c 30 	lds	r21, 0x307C	; 0x80307c <xTickCount+0x1>
     e34:	60 91 7d 30 	lds	r22, 0x307D	; 0x80307d <xTickCount+0x2>
     e38:	70 91 7e 30 	lds	r23, 0x307E	; 0x80307e <xTickCount+0x3>
     e3c:	48 17       	cp	r20, r24
     e3e:	59 07       	cpc	r21, r25
     e40:	6a 07       	cpc	r22, r26
     e42:	7b 07       	cpc	r23, r27
     e44:	58 f1       	brcs	.+86     	; 0xe9c <vTaskIncrementTick+0x190>
     e46:	0f 2e       	mov	r0, r31
     e48:	fb e0       	ldi	r31, 0x0B	; 11
     e4a:	ff 2e       	mov	r15, r31
     e4c:	f0 2d       	mov	r31, r0
     e4e:	2f c0       	rjmp	.+94     	; 0xeae <vTaskIncrementTick+0x1a2>
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	dc 01       	movw	r26, r24
     e56:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
     e5a:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
     e5e:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
     e62:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
     e66:	4d c0       	rjmp	.+154    	; 0xf02 <vTaskIncrementTick+0x1f6>
     e68:	e0 91 8d 30 	lds	r30, 0x308D	; 0x80308d <pxDelayedTaskList>
     e6c:	f0 91 8e 30 	lds	r31, 0x308E	; 0x80308e <pxDelayedTaskList+0x1>
     e70:	07 80       	ldd	r0, Z+7	; 0x07
     e72:	f0 85       	ldd	r31, Z+8	; 0x08
     e74:	e0 2d       	mov	r30, r0
     e76:	c0 85       	ldd	r28, Z+8	; 0x08
     e78:	d1 85       	ldd	r29, Z+9	; 0x09
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	9b 81       	ldd	r25, Y+3	; 0x03
     e7e:	ac 81       	ldd	r26, Y+4	; 0x04
     e80:	bd 81       	ldd	r27, Y+5	; 0x05
     e82:	40 91 7b 30 	lds	r20, 0x307B	; 0x80307b <xTickCount>
     e86:	50 91 7c 30 	lds	r21, 0x307C	; 0x80307c <xTickCount+0x1>
     e8a:	60 91 7d 30 	lds	r22, 0x307D	; 0x80307d <xTickCount+0x2>
     e8e:	70 91 7e 30 	lds	r23, 0x307E	; 0x80307e <xTickCount+0x3>
     e92:	48 17       	cp	r20, r24
     e94:	59 07       	cpc	r21, r25
     e96:	6a 07       	cpc	r22, r26
     e98:	7b 07       	cpc	r23, r27
     e9a:	48 f4       	brcc	.+18     	; 0xeae <vTaskIncrementTick+0x1a2>
     e9c:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <xNextTaskUnblockTime>
     ea0:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <xNextTaskUnblockTime+0x1>
     ea4:	a0 93 04 20 	sts	0x2004, r26	; 0x802004 <xNextTaskUnblockTime+0x2>
     ea8:	b0 93 05 20 	sts	0x2005, r27	; 0x802005 <xNextTaskUnblockTime+0x3>
     eac:	2a c0       	rjmp	.+84     	; 0xf02 <vTaskIncrementTick+0x1f6>
     eae:	8e 01       	movw	r16, r28
     eb0:	0e 5f       	subi	r16, 0xFE	; 254
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	c8 01       	movw	r24, r16
     eb6:	0e 94 c4 02 	call	0x588	; 0x588 <vListRemove>
     eba:	88 8d       	ldd	r24, Y+24	; 0x18
     ebc:	99 8d       	ldd	r25, Y+25	; 0x19
     ebe:	89 2b       	or	r24, r25
     ec0:	21 f0       	breq	.+8      	; 0xeca <vTaskIncrementTick+0x1be>
     ec2:	ce 01       	movw	r24, r28
     ec4:	0e 96       	adiw	r24, 0x0e	; 14
     ec6:	0e 94 c4 02 	call	0x588	; 0x588 <vListRemove>
     eca:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ecc:	90 91 7a 30 	lds	r25, 0x307A	; 0x80307a <uxTopReadyPriority>
     ed0:	98 17       	cp	r25, r24
     ed2:	10 f4       	brcc	.+4      	; 0xed8 <vTaskIncrementTick+0x1cc>
     ed4:	80 93 7a 30 	sts	0x307A, r24	; 0x80307a <uxTopReadyPriority>
     ed8:	f8 9e       	mul	r15, r24
     eda:	c0 01       	movw	r24, r0
     edc:	11 24       	eor	r1, r1
     ede:	b8 01       	movw	r22, r16
     ee0:	81 57       	subi	r24, 0x71	; 113
     ee2:	9f 4c       	sbci	r25, 0xCF	; 207
     ee4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vListInsertEnd>
     ee8:	e0 91 8d 30 	lds	r30, 0x308D	; 0x80308d <pxDelayedTaskList>
     eec:	f0 91 8e 30 	lds	r31, 0x308E	; 0x80308e <pxDelayedTaskList+0x1>
     ef0:	80 81       	ld	r24, Z
     ef2:	81 11       	cpse	r24, r1
     ef4:	b9 cf       	rjmp	.-142    	; 0xe68 <vTaskIncrementTick+0x15c>
     ef6:	ac cf       	rjmp	.-168    	; 0xe50 <vTaskIncrementTick+0x144>
     ef8:	80 91 78 30 	lds	r24, 0x3078	; 0x803078 <uxMissedTicks>
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	80 93 78 30 	sts	0x3078, r24	; 0x803078 <uxMissedTicks>
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	08 95       	ret

00000f0e <xTaskResumeAll>:
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15
     f16:	0f 93       	push	r16
     f18:	1f 93       	push	r17
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	0f 92       	push	r0
     f24:	80 91 79 30 	lds	r24, 0x3079	; 0x803079 <uxSchedulerSuspended>
     f28:	81 50       	subi	r24, 0x01	; 1
     f2a:	80 93 79 30 	sts	0x3079, r24	; 0x803079 <uxSchedulerSuspended>
     f2e:	80 91 79 30 	lds	r24, 0x3079	; 0x803079 <uxSchedulerSuspended>
     f32:	81 11       	cpse	r24, r1
     f34:	60 c0       	rjmp	.+192    	; 0xff6 <xTaskResumeAll+0xe8>
     f36:	80 91 7f 30 	lds	r24, 0x307F	; 0x80307f <uxCurrentNumberOfTasks>
     f3a:	81 11       	cpse	r24, r1
     f3c:	2c c0       	rjmp	.+88     	; 0xf96 <xTaskResumeAll+0x88>
     f3e:	5e c0       	rjmp	.+188    	; 0xffc <xTaskResumeAll+0xee>
     f40:	d7 01       	movw	r26, r14
     f42:	17 96       	adiw	r26, 0x07	; 7
     f44:	ed 91       	ld	r30, X+
     f46:	fc 91       	ld	r31, X
     f48:	18 97       	sbiw	r26, 0x08	; 8
     f4a:	c0 85       	ldd	r28, Z+8	; 0x08
     f4c:	d1 85       	ldd	r29, Z+9	; 0x09
     f4e:	ce 01       	movw	r24, r28
     f50:	0e 96       	adiw	r24, 0x0e	; 14
     f52:	0e 94 c4 02 	call	0x588	; 0x588 <vListRemove>
     f56:	8e 01       	movw	r16, r28
     f58:	0e 5f       	subi	r16, 0xFE	; 254
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	c8 01       	movw	r24, r16
     f5e:	0e 94 c4 02 	call	0x588	; 0x588 <vListRemove>
     f62:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f64:	90 91 7a 30 	lds	r25, 0x307A	; 0x80307a <uxTopReadyPriority>
     f68:	98 17       	cp	r25, r24
     f6a:	10 f4       	brcc	.+4      	; 0xf70 <xTaskResumeAll+0x62>
     f6c:	80 93 7a 30 	sts	0x307A, r24	; 0x80307a <uxTopReadyPriority>
     f70:	d8 9e       	mul	r13, r24
     f72:	c0 01       	movw	r24, r0
     f74:	11 24       	eor	r1, r1
     f76:	b8 01       	movw	r22, r16
     f78:	81 57       	subi	r24, 0x71	; 113
     f7a:	9f 4c       	sbci	r25, 0xCF	; 207
     f7c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vListInsertEnd>
     f80:	e0 91 bb 30 	lds	r30, 0x30BB	; 0x8030bb <pxCurrentTCB>
     f84:	f0 91 bc 30 	lds	r31, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
     f88:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f8a:	82 8d       	ldd	r24, Z+26	; 0x1a
     f8c:	98 17       	cp	r25, r24
     f8e:	70 f0       	brcs	.+28     	; 0xfac <xTaskResumeAll+0x9e>
     f90:	cc 24       	eor	r12, r12
     f92:	c3 94       	inc	r12
     f94:	0b c0       	rjmp	.+22     	; 0xfac <xTaskResumeAll+0x9e>
     f96:	c1 2c       	mov	r12, r1
     f98:	0f 2e       	mov	r0, r31
     f9a:	f0 e8       	ldi	r31, 0x80	; 128
     f9c:	ef 2e       	mov	r14, r31
     f9e:	f0 e3       	ldi	r31, 0x30	; 48
     fa0:	ff 2e       	mov	r15, r31
     fa2:	f0 2d       	mov	r31, r0
     fa4:	0f 2e       	mov	r0, r31
     fa6:	fb e0       	ldi	r31, 0x0B	; 11
     fa8:	df 2e       	mov	r13, r31
     faa:	f0 2d       	mov	r31, r0
     fac:	f7 01       	movw	r30, r14
     fae:	80 81       	ld	r24, Z
     fb0:	81 11       	cpse	r24, r1
     fb2:	c6 cf       	rjmp	.-116    	; 0xf40 <xTaskResumeAll+0x32>
     fb4:	80 91 78 30 	lds	r24, 0x3078	; 0x803078 <uxMissedTicks>
     fb8:	88 23       	and	r24, r24
     fba:	81 f0       	breq	.+32     	; 0xfdc <xTaskResumeAll+0xce>
     fbc:	80 91 78 30 	lds	r24, 0x3078	; 0x803078 <uxMissedTicks>
     fc0:	88 23       	and	r24, r24
     fc2:	99 f0       	breq	.+38     	; 0xfea <xTaskResumeAll+0xdc>
     fc4:	0e 94 86 06 	call	0xd0c	; 0xd0c <vTaskIncrementTick>
     fc8:	80 91 78 30 	lds	r24, 0x3078	; 0x803078 <uxMissedTicks>
     fcc:	81 50       	subi	r24, 0x01	; 1
     fce:	80 93 78 30 	sts	0x3078, r24	; 0x803078 <uxMissedTicks>
     fd2:	80 91 78 30 	lds	r24, 0x3078	; 0x803078 <uxMissedTicks>
     fd6:	81 11       	cpse	r24, r1
     fd8:	f5 cf       	rjmp	.-22     	; 0xfc4 <xTaskResumeAll+0xb6>
     fda:	07 c0       	rjmp	.+14     	; 0xfea <xTaskResumeAll+0xdc>
     fdc:	f1 e0       	ldi	r31, 0x01	; 1
     fde:	cf 16       	cp	r12, r31
     fe0:	21 f0       	breq	.+8      	; 0xfea <xTaskResumeAll+0xdc>
     fe2:	80 91 77 30 	lds	r24, 0x3077	; 0x803077 <xMissedYield>
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	41 f4       	brne	.+16     	; 0xffa <xTaskResumeAll+0xec>
     fea:	10 92 77 30 	sts	0x3077, r1	; 0x803077 <xMissedYield>
     fee:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <vPortYield>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <xTaskResumeAll+0xee>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <xTaskResumeAll+0xee>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	df 90       	pop	r13
    100e:	cf 90       	pop	r12
    1010:	08 95       	ret

00001012 <vTaskSwitchContext>:
    1012:	80 91 79 30 	lds	r24, 0x3079	; 0x803079 <uxSchedulerSuspended>
    1016:	81 11       	cpse	r24, r1
    1018:	0c c0       	rjmp	.+24     	; 0x1032 <vTaskSwitchContext+0x20>
    101a:	e0 91 7a 30 	lds	r30, 0x307A	; 0x80307a <uxTopReadyPriority>
    101e:	4b e0       	ldi	r20, 0x0B	; 11
    1020:	e4 9f       	mul	r30, r20
    1022:	f0 01       	movw	r30, r0
    1024:	11 24       	eor	r1, r1
    1026:	e1 57       	subi	r30, 0x71	; 113
    1028:	ff 4c       	sbci	r31, 0xCF	; 207
    102a:	80 81       	ld	r24, Z
    102c:	88 23       	and	r24, r24
    102e:	29 f0       	breq	.+10     	; 0x103a <vTaskSwitchContext+0x28>
    1030:	14 c0       	rjmp	.+40     	; 0x105a <vTaskSwitchContext+0x48>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 77 30 	sts	0x3077, r24	; 0x803077 <xMissedYield>
    1038:	08 95       	ret
    103a:	9b e0       	ldi	r25, 0x0B	; 11
    103c:	80 91 7a 30 	lds	r24, 0x307A	; 0x80307a <uxTopReadyPriority>
    1040:	81 50       	subi	r24, 0x01	; 1
    1042:	80 93 7a 30 	sts	0x307A, r24	; 0x80307a <uxTopReadyPriority>
    1046:	e0 91 7a 30 	lds	r30, 0x307A	; 0x80307a <uxTopReadyPriority>
    104a:	9e 9f       	mul	r25, r30
    104c:	f0 01       	movw	r30, r0
    104e:	11 24       	eor	r1, r1
    1050:	e1 57       	subi	r30, 0x71	; 113
    1052:	ff 4c       	sbci	r31, 0xCF	; 207
    1054:	80 81       	ld	r24, Z
    1056:	88 23       	and	r24, r24
    1058:	89 f3       	breq	.-30     	; 0x103c <vTaskSwitchContext+0x2a>
    105a:	80 91 7a 30 	lds	r24, 0x307A	; 0x80307a <uxTopReadyPriority>
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	4b e0       	ldi	r20, 0x0B	; 11
    1064:	84 9f       	mul	r24, r20
    1066:	c0 01       	movw	r24, r0
    1068:	11 24       	eor	r1, r1
    106a:	dc 01       	movw	r26, r24
    106c:	a1 57       	subi	r26, 0x71	; 113
    106e:	bf 4c       	sbci	r27, 0xCF	; 207
    1070:	11 96       	adiw	r26, 0x01	; 1
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	12 97       	sbiw	r26, 0x02	; 2
    1078:	04 80       	ldd	r0, Z+4	; 0x04
    107a:	f5 81       	ldd	r31, Z+5	; 0x05
    107c:	e0 2d       	mov	r30, r0
    107e:	11 96       	adiw	r26, 0x01	; 1
    1080:	ed 93       	st	X+, r30
    1082:	fc 93       	st	X, r31
    1084:	12 97       	sbiw	r26, 0x02	; 2
    1086:	8e 56       	subi	r24, 0x6E	; 110
    1088:	9f 4c       	sbci	r25, 0xCF	; 207
    108a:	e8 17       	cp	r30, r24
    108c:	f9 07       	cpc	r31, r25
    108e:	61 f4       	brne	.+24     	; 0x10a8 <vTaskSwitchContext+0x96>
    1090:	84 81       	ldd	r24, Z+4	; 0x04
    1092:	95 81       	ldd	r25, Z+5	; 0x05
    1094:	4b e0       	ldi	r20, 0x0B	; 11
    1096:	42 9f       	mul	r20, r18
    1098:	f0 01       	movw	r30, r0
    109a:	43 9f       	mul	r20, r19
    109c:	f0 0d       	add	r31, r0
    109e:	11 24       	eor	r1, r1
    10a0:	e1 57       	subi	r30, 0x71	; 113
    10a2:	ff 4c       	sbci	r31, 0xCF	; 207
    10a4:	81 83       	std	Z+1, r24	; 0x01
    10a6:	92 83       	std	Z+2, r25	; 0x02
    10a8:	8b e0       	ldi	r24, 0x0B	; 11
    10aa:	82 9f       	mul	r24, r18
    10ac:	f0 01       	movw	r30, r0
    10ae:	83 9f       	mul	r24, r19
    10b0:	f0 0d       	add	r31, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	e1 57       	subi	r30, 0x71	; 113
    10b6:	ff 4c       	sbci	r31, 0xCF	; 207
    10b8:	01 80       	ldd	r0, Z+1	; 0x01
    10ba:	f2 81       	ldd	r31, Z+2	; 0x02
    10bc:	e0 2d       	mov	r30, r0
    10be:	80 85       	ldd	r24, Z+8	; 0x08
    10c0:	91 85       	ldd	r25, Z+9	; 0x09
    10c2:	80 93 bb 30 	sts	0x30BB, r24	; 0x8030bb <pxCurrentTCB>
    10c6:	90 93 bc 30 	sts	0x30BC, r25	; 0x8030bc <pxCurrentTCB+0x1>
    10ca:	08 95       	ret

000010cc <vTaskPlaceOnEventList>:
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	6a 01       	movw	r12, r20
    10d6:	7b 01       	movw	r14, r22
    10d8:	60 91 bb 30 	lds	r22, 0x30BB	; 0x8030bb <pxCurrentTCB>
    10dc:	70 91 bc 30 	lds	r23, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
    10e0:	62 5f       	subi	r22, 0xF2	; 242
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <vListInsert>
    10e8:	80 91 bb 30 	lds	r24, 0x30BB	; 0x8030bb <pxCurrentTCB>
    10ec:	90 91 bc 30 	lds	r25, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
    10f0:	02 96       	adiw	r24, 0x02	; 2
    10f2:	0e 94 c4 02 	call	0x588	; 0x588 <vListRemove>
    10f6:	80 91 7b 30 	lds	r24, 0x307B	; 0x80307b <xTickCount>
    10fa:	90 91 7c 30 	lds	r25, 0x307C	; 0x80307c <xTickCount+0x1>
    10fe:	a0 91 7d 30 	lds	r26, 0x307D	; 0x80307d <xTickCount+0x2>
    1102:	b0 91 7e 30 	lds	r27, 0x307E	; 0x80307e <xTickCount+0x3>
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	6c 0d       	add	r22, r12
    110c:	7d 1d       	adc	r23, r13
    110e:	8e 1d       	adc	r24, r14
    1110:	9f 1d       	adc	r25, r15
    1112:	0e 94 32 06 	call	0xc64	; 0xc64 <prvAddCurrentTaskToDelayedList>
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	df 90       	pop	r13
    111c:	cf 90       	pop	r12
    111e:	08 95       	ret

00001120 <xTaskRemoveFromEventList>:
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	dc 01       	movw	r26, r24
    112a:	17 96       	adiw	r26, 0x07	; 7
    112c:	ed 91       	ld	r30, X+
    112e:	fc 91       	ld	r31, X
    1130:	18 97       	sbiw	r26, 0x08	; 8
    1132:	c0 85       	ldd	r28, Z+8	; 0x08
    1134:	d1 85       	ldd	r29, Z+9	; 0x09
    1136:	8e 01       	movw	r16, r28
    1138:	02 5f       	subi	r16, 0xF2	; 242
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	c8 01       	movw	r24, r16
    113e:	0e 94 c4 02 	call	0x588	; 0x588 <vListRemove>
    1142:	80 91 79 30 	lds	r24, 0x3079	; 0x803079 <uxSchedulerSuspended>
    1146:	81 11       	cpse	r24, r1
    1148:	16 c0       	rjmp	.+44     	; 0x1176 <xTaskRemoveFromEventList+0x56>
    114a:	0c 50       	subi	r16, 0x0C	; 12
    114c:	11 09       	sbc	r17, r1
    114e:	c8 01       	movw	r24, r16
    1150:	0e 94 c4 02 	call	0x588	; 0x588 <vListRemove>
    1154:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1156:	90 91 7a 30 	lds	r25, 0x307A	; 0x80307a <uxTopReadyPriority>
    115a:	98 17       	cp	r25, r24
    115c:	10 f4       	brcc	.+4      	; 0x1162 <xTaskRemoveFromEventList+0x42>
    115e:	80 93 7a 30 	sts	0x307A, r24	; 0x80307a <uxTopReadyPriority>
    1162:	bb e0       	ldi	r27, 0x0B	; 11
    1164:	8b 9f       	mul	r24, r27
    1166:	c0 01       	movw	r24, r0
    1168:	11 24       	eor	r1, r1
    116a:	b8 01       	movw	r22, r16
    116c:	81 57       	subi	r24, 0x71	; 113
    116e:	9f 4c       	sbci	r25, 0xCF	; 207
    1170:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vListInsertEnd>
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <xTaskRemoveFromEventList+0x60>
    1176:	b8 01       	movw	r22, r16
    1178:	80 e8       	ldi	r24, 0x80	; 128
    117a:	90 e3       	ldi	r25, 0x30	; 48
    117c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vListInsertEnd>
    1180:	e0 91 bb 30 	lds	r30, 0x30BB	; 0x8030bb <pxCurrentTCB>
    1184:	f0 91 bc 30 	lds	r31, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    118c:	92 8d       	ldd	r25, Z+26	; 0x1a
    118e:	29 17       	cp	r18, r25
    1190:	08 f4       	brcc	.+2      	; 0x1194 <xTaskRemoveFromEventList+0x74>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <vTaskSetTimeOutState>:
    119e:	20 91 76 30 	lds	r18, 0x3076	; 0x803076 <xNumOfOverflows>
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 83       	st	Z, r18
    11a6:	40 91 7b 30 	lds	r20, 0x307B	; 0x80307b <xTickCount>
    11aa:	50 91 7c 30 	lds	r21, 0x307C	; 0x80307c <xTickCount+0x1>
    11ae:	60 91 7d 30 	lds	r22, 0x307D	; 0x80307d <xTickCount+0x2>
    11b2:	70 91 7e 30 	lds	r23, 0x307E	; 0x80307e <xTickCount+0x3>
    11b6:	41 83       	std	Z+1, r20	; 0x01
    11b8:	52 83       	std	Z+2, r21	; 0x02
    11ba:	63 83       	std	Z+3, r22	; 0x03
    11bc:	74 83       	std	Z+4, r23	; 0x04
    11be:	08 95       	ret

000011c0 <xTaskCheckForTimeOut>:
    11c0:	8f 92       	push	r8
    11c2:	9f 92       	push	r9
    11c4:	af 92       	push	r10
    11c6:	bf 92       	push	r11
    11c8:	cf 92       	push	r12
    11ca:	df 92       	push	r13
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	fc 01       	movw	r30, r24
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	0f 92       	push	r0
    11e0:	80 91 76 30 	lds	r24, 0x3076	; 0x803076 <xNumOfOverflows>
    11e4:	90 81       	ld	r25, Z
    11e6:	98 17       	cp	r25, r24
    11e8:	89 f0       	breq	.+34     	; 0x120c <xTaskCheckForTimeOut+0x4c>
    11ea:	80 91 7b 30 	lds	r24, 0x307B	; 0x80307b <xTickCount>
    11ee:	90 91 7c 30 	lds	r25, 0x307C	; 0x80307c <xTickCount+0x1>
    11f2:	a0 91 7d 30 	lds	r26, 0x307D	; 0x80307d <xTickCount+0x2>
    11f6:	b0 91 7e 30 	lds	r27, 0x307E	; 0x80307e <xTickCount+0x3>
    11fa:	01 81       	ldd	r16, Z+1	; 0x01
    11fc:	12 81       	ldd	r17, Z+2	; 0x02
    11fe:	23 81       	ldd	r18, Z+3	; 0x03
    1200:	34 81       	ldd	r19, Z+4	; 0x04
    1202:	80 17       	cp	r24, r16
    1204:	91 07       	cpc	r25, r17
    1206:	a2 07       	cpc	r26, r18
    1208:	b3 07       	cpc	r27, r19
    120a:	a8 f5       	brcc	.+106    	; 0x1276 <xTaskCheckForTimeOut+0xb6>
    120c:	80 91 7b 30 	lds	r24, 0x307B	; 0x80307b <xTickCount>
    1210:	90 91 7c 30 	lds	r25, 0x307C	; 0x80307c <xTickCount+0x1>
    1214:	a0 91 7d 30 	lds	r26, 0x307D	; 0x80307d <xTickCount+0x2>
    1218:	b0 91 7e 30 	lds	r27, 0x307E	; 0x80307e <xTickCount+0x3>
    121c:	c1 80       	ldd	r12, Z+1	; 0x01
    121e:	d2 80       	ldd	r13, Z+2	; 0x02
    1220:	e3 80       	ldd	r14, Z+3	; 0x03
    1222:	f4 80       	ldd	r15, Z+4	; 0x04
    1224:	eb 01       	movw	r28, r22
    1226:	08 81       	ld	r16, Y
    1228:	19 81       	ldd	r17, Y+1	; 0x01
    122a:	2a 81       	ldd	r18, Y+2	; 0x02
    122c:	3b 81       	ldd	r19, Y+3	; 0x03
    122e:	8c 19       	sub	r24, r12
    1230:	9d 09       	sbc	r25, r13
    1232:	ae 09       	sbc	r26, r14
    1234:	bf 09       	sbc	r27, r15
    1236:	80 17       	cp	r24, r16
    1238:	91 07       	cpc	r25, r17
    123a:	a2 07       	cpc	r26, r18
    123c:	b3 07       	cpc	r27, r19
    123e:	e8 f4       	brcc	.+58     	; 0x127a <xTaskCheckForTimeOut+0xba>
    1240:	cf 01       	movw	r24, r30
    1242:	80 90 7b 30 	lds	r8, 0x307B	; 0x80307b <xTickCount>
    1246:	90 90 7c 30 	lds	r9, 0x307C	; 0x80307c <xTickCount+0x1>
    124a:	a0 90 7d 30 	lds	r10, 0x307D	; 0x80307d <xTickCount+0x2>
    124e:	b0 90 7e 30 	lds	r11, 0x307E	; 0x80307e <xTickCount+0x3>
    1252:	b5 01       	movw	r22, r10
    1254:	a4 01       	movw	r20, r8
    1256:	4c 19       	sub	r20, r12
    1258:	5d 09       	sbc	r21, r13
    125a:	6e 09       	sbc	r22, r14
    125c:	7f 09       	sbc	r23, r15
    125e:	04 1b       	sub	r16, r20
    1260:	15 0b       	sbc	r17, r21
    1262:	26 0b       	sbc	r18, r22
    1264:	37 0b       	sbc	r19, r23
    1266:	08 83       	st	Y, r16
    1268:	19 83       	std	Y+1, r17	; 0x01
    126a:	2a 83       	std	Y+2, r18	; 0x02
    126c:	3b 83       	std	Y+3, r19	; 0x03
    126e:	0e 94 cf 08 	call	0x119e	; 0x119e <vTaskSetTimeOutState>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	03 c0       	rjmp	.+6      	; 0x127c <xTaskCheckForTimeOut+0xbc>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	01 c0       	rjmp	.+2      	; 0x127c <xTaskCheckForTimeOut+0xbc>
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	bf 90       	pop	r11
    1292:	af 90       	pop	r10
    1294:	9f 90       	pop	r9
    1296:	8f 90       	pop	r8
    1298:	08 95       	ret

0000129a <vTaskMissedYield>:
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	80 93 77 30 	sts	0x3077, r24	; 0x803077 <xMissedYield>
    12a0:	08 95       	ret

000012a2 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    12a2:	80 91 bb 30 	lds	r24, 0x30BB	; 0x8030bb <pxCurrentTCB>
    12a6:	90 91 bc 30 	lds	r25, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>

		return xReturn;
	}
    12aa:	08 95       	ret

000012ac <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	fc 01       	movw	r30, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    12b6:	22 8d       	ldd	r18, Z+26	; 0x1a
    12b8:	a0 91 bb 30 	lds	r26, 0x30BB	; 0x8030bb <pxCurrentTCB>
    12bc:	b0 91 bc 30 	lds	r27, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
    12c0:	5a 96       	adiw	r26, 0x1a	; 26
    12c2:	8c 91       	ld	r24, X
    12c4:	28 17       	cp	r18, r24
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <vTaskPriorityInherit+0x1e>
    12c8:	41 c0       	rjmp	.+130    	; 0x134c <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    12ca:	a0 91 bb 30 	lds	r26, 0x30BB	; 0x8030bb <pxCurrentTCB>
    12ce:	b0 91 bc 30 	lds	r27, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
    12d2:	5a 96       	adiw	r26, 0x1a	; 26
    12d4:	3c 91       	ld	r19, X
    12d6:	84 e0       	ldi	r24, 0x04	; 4
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	a0 e0       	ldi	r26, 0x00	; 0
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	83 1b       	sub	r24, r19
    12e0:	91 09       	sbc	r25, r1
    12e2:	a1 09       	sbc	r26, r1
    12e4:	b1 09       	sbc	r27, r1
    12e6:	86 87       	std	Z+14, r24	; 0x0e
    12e8:	97 87       	std	Z+15, r25	; 0x0f
    12ea:	a0 8b       	std	Z+16, r26	; 0x10
    12ec:	b1 8b       	std	Z+17, r27	; 0x11

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    12ee:	8b e0       	ldi	r24, 0x0B	; 11
    12f0:	28 9f       	mul	r18, r24
    12f2:	90 01       	movw	r18, r0
    12f4:	11 24       	eor	r1, r1
    12f6:	21 57       	subi	r18, 0x71	; 113
    12f8:	3f 4c       	sbci	r19, 0xCF	; 207
    12fa:	84 85       	ldd	r24, Z+12	; 0x0c
    12fc:	95 85       	ldd	r25, Z+13	; 0x0d
    12fe:	82 17       	cp	r24, r18
    1300:	93 07       	cpc	r25, r19
    1302:	e9 f4       	brne	.+58     	; 0x133e <vTaskPriorityInherit+0x92>
    1304:	8f 01       	movw	r16, r30
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    1306:	ef 01       	movw	r28, r30
    1308:	22 96       	adiw	r28, 0x02	; 2
    130a:	ce 01       	movw	r24, r28
    130c:	0e 94 c4 02 	call	0x588	; 0x588 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1310:	e0 91 bb 30 	lds	r30, 0x30BB	; 0x8030bb <pxCurrentTCB>
    1314:	f0 91 bc 30 	lds	r31, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
    1318:	82 8d       	ldd	r24, Z+26	; 0x1a
    131a:	f8 01       	movw	r30, r16
    131c:	82 8f       	std	Z+26, r24	; 0x1a
				prvAddTaskToReadyQueue( pxTCB );
    131e:	90 91 7a 30 	lds	r25, 0x307A	; 0x80307a <uxTopReadyPriority>
    1322:	98 17       	cp	r25, r24
    1324:	10 f4       	brcc	.+4      	; 0x132a <vTaskPriorityInherit+0x7e>
    1326:	80 93 7a 30 	sts	0x307A, r24	; 0x80307a <uxTopReadyPriority>
    132a:	fb e0       	ldi	r31, 0x0B	; 11
    132c:	8f 9f       	mul	r24, r31
    132e:	c0 01       	movw	r24, r0
    1330:	11 24       	eor	r1, r1
    1332:	be 01       	movw	r22, r28
    1334:	81 57       	subi	r24, 0x71	; 113
    1336:	9f 4c       	sbci	r25, 0xCF	; 207
    1338:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vListInsertEnd>
    133c:	07 c0       	rjmp	.+14     	; 0x134c <vTaskPriorityInherit+0xa0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    133e:	a0 91 bb 30 	lds	r26, 0x30BB	; 0x8030bb <pxCurrentTCB>
    1342:	b0 91 bc 30 	lds	r27, 0x30BC	; 0x8030bc <pxCurrentTCB+0x1>
    1346:	5a 96       	adiw	r26, 0x1a	; 26
    1348:	8c 91       	ld	r24, X
    134a:	82 8f       	std	Z+26, r24	; 0x1a
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	08 95       	ret

00001356 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	49 f1       	breq	.+82     	; 0x13b4 <vTaskPriorityDisinherit+0x5e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1362:	fc 01       	movw	r30, r24
    1364:	32 8d       	ldd	r19, Z+26	; 0x1a
    1366:	27 a1       	ldd	r18, Z+39	; 0x27
    1368:	32 17       	cp	r19, r18
    136a:	21 f1       	breq	.+72     	; 0x13b4 <vTaskPriorityDisinherit+0x5e>
    136c:	ec 01       	movw	r28, r24
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    136e:	8c 01       	movw	r16, r24
    1370:	0e 5f       	subi	r16, 0xFE	; 254
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	c8 01       	movw	r24, r16
    1376:	0e 94 c4 02 	call	0x588	; 0x588 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    137a:	8f a1       	ldd	r24, Y+39	; 0x27
    137c:	8a 8f       	std	Y+26, r24	; 0x1a
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    137e:	44 e0       	ldi	r20, 0x04	; 4
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	48 1b       	sub	r20, r24
    1388:	51 09       	sbc	r21, r1
    138a:	61 09       	sbc	r22, r1
    138c:	71 09       	sbc	r23, r1
    138e:	4e 87       	std	Y+14, r20	; 0x0e
    1390:	5f 87       	std	Y+15, r21	; 0x0f
    1392:	68 8b       	std	Y+16, r22	; 0x10
    1394:	79 8b       	std	Y+17, r23	; 0x11
				prvAddTaskToReadyQueue( pxTCB );
    1396:	90 91 7a 30 	lds	r25, 0x307A	; 0x80307a <uxTopReadyPriority>
    139a:	98 17       	cp	r25, r24
    139c:	10 f4       	brcc	.+4      	; 0x13a2 <vTaskPriorityDisinherit+0x4c>
    139e:	80 93 7a 30 	sts	0x307A, r24	; 0x80307a <uxTopReadyPriority>
    13a2:	fb e0       	ldi	r31, 0x0B	; 11
    13a4:	8f 9f       	mul	r24, r31
    13a6:	c0 01       	movw	r24, r0
    13a8:	11 24       	eor	r1, r1
    13aa:	b8 01       	movw	r22, r16
    13ac:	81 57       	subi	r24, 0x71	; 113
    13ae:	9f 4c       	sbci	r25, 0xCF	; 207
    13b0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <vListInsertEnd>
			}
		}
	}
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <_ZN14frt_text_queue7getcharEv>:
 *  the queue, it blocks until a character is received.
 *  @return The character which was received from the queue
 */

inline int16_t frt_text_queue::getchar (void)
{
    13be:	0f 93       	push	r16
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	1f 92       	push	r1
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
	char recv_char;							// Character read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue
	if (xQueueReceive (the_queue, &recv_char, portMAX_DELAY) != pdTRUE)
    13ca:	00 e0       	ldi	r16, 0x00	; 0
    13cc:	2f ef       	ldi	r18, 0xFF	; 255
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	a9 01       	movw	r20, r18
    13d2:	be 01       	movw	r22, r28
    13d4:	6f 5f       	subi	r22, 0xFF	; 255
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	fc 01       	movw	r30, r24
    13da:	80 85       	ldd	r24, Z+8	; 0x08
    13dc:	91 85       	ldd	r25, Z+9	; 0x09
    13de:	0e 94 66 05 	call	0xacc	; 0xacc <xQueueGenericReceive>
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	19 f4       	brne	.+6      	; 0x13ec <_ZN14frt_text_queue7getcharEv+0x2e>
	{
		return (-1);
	}

	// OK, we got good data from the queue, so return it
	return (recv_char);
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <_ZN14frt_text_queue7getcharEv+0x32>
	char recv_char;							// Character read from the queue

	// If xQueueReceive doesn't return pdTrue, nothing was found in the queue
	if (xQueueReceive (the_queue, &recv_char, portMAX_DELAY) != pdTRUE)
	{
		return (-1);
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	9f ef       	ldi	r25, 0xFF	; 255
	}

	// OK, we got good data from the queue, so return it
	return (recv_char);
}
    13f0:	0f 90       	pop	r0
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	0f 91       	pop	r16
    13f8:	08 95       	ret

000013fa <_ZN14frt_text_queue14check_for_charEv>:
 *  @return True for character available, false for no character available
 */

inline bool frt_text_queue::check_for_char (void)
{
	if (uxQueueMessagesWaiting (the_queue) == 0)
    13fa:	fc 01       	movw	r30, r24
    13fc:	80 85       	ldd	r24, Z+8	; 0x08
    13fe:	91 85       	ldd	r25, Z+9	; 0x09
    1400:	0e 94 2a 06 	call	0xc54	; 0xc54 <uxQueueMessagesWaiting>
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	81 11       	cpse	r24, r1
    1408:	01 c0       	rjmp	.+2      	; 0x140c <_ZN14frt_text_queue14check_for_charEv+0x12>
    140a:	90 e0       	ldi	r25, 0x00	; 0
	{
		return (false);
	}
	return (true);
}
    140c:	89 2f       	mov	r24, r25
    140e:	08 95       	ret

00001410 <_ZN14frt_text_queue7putcharEc>:
 *  @param a_char The character to be sent to the queue
 *  @return True if the character was successfully sent, false if something went wrong
 */

inline bool frt_text_queue::putchar (char a_char)
{
    1410:	0f 93       	push	r16
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	1f 92       	push	r1
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	69 83       	std	Y+1, r22	; 0x01
	// If the data is successfully put in the queue, return true
	if (xQueueSendToBack (the_queue, &a_char, ticks_to_wait))
    141e:	fc 01       	movw	r30, r24
    1420:	22 85       	ldd	r18, Z+10	; 0x0a
    1422:	33 85       	ldd	r19, Z+11	; 0x0b
    1424:	44 85       	ldd	r20, Z+12	; 0x0c
    1426:	55 85       	ldd	r21, Z+13	; 0x0d
    1428:	00 e0       	ldi	r16, 0x00	; 0
    142a:	be 01       	movw	r22, r28
    142c:	6f 5f       	subi	r22, 0xFF	; 255
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	80 85       	ldd	r24, Z+8	; 0x08
    1432:	91 85       	ldd	r25, Z+9	; 0x09
    1434:	0e 94 cb 04 	call	0x996	; 0x996 <xQueueGenericSend>
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	81 11       	cpse	r24, r1
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <_ZN14frt_text_queue7putcharEc+0x30>
    143e:	90 e0       	ldi	r25, 0x00	; 0
		return (true);
	}

	// If we get here, something went wrong (probably a timeout), so return false
	return (false);
}
    1440:	89 2f       	mov	r24, r25
    1442:	0f 90       	pop	r0
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	0f 91       	pop	r16
    144a:	08 95       	ret

0000144c <_ZN14frt_text_queueC1EjP8emstreamm>:
 *                     portMAX_DELAY causes a send to block indefinitely
 *  @param p_ser_dev A pointer which points to a serial device which can be used for
 *                   diagnostic logging or printing
 */

frt_text_queue::frt_text_queue (uint16_t queue_size, emstream* p_ser_dev,
    144c:	8f 92       	push	r8
    144e:	9f 92       	push	r9
    1450:	bf 92       	push	r11
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	ec 01       	movw	r28, r24
    1464:	b6 2e       	mov	r11, r22
    1466:	4a 01       	movw	r8, r20
    1468:	68 01       	movw	r12, r16
    146a:	79 01       	movw	r14, r18
							   portTickType a_wait_time)
    146c:	0e 94 12 0b 	call	0x1624	; 0x1624 <_ZN8emstreamC1Ev>
    1470:	8a e0       	ldi	r24, 0x0A	; 10
    1472:	90 e2       	ldi	r25, 0x20	; 32
    1474:	88 83       	st	Y, r24
    1476:	99 83       	std	Y+1, r25	; 0x01
{
	// Save the pointer to the serial device which is used for debugging
	p_serial = p_ser_dev;
    1478:	8e 86       	std	Y+14, r8	; 0x0e
    147a:	9f 86       	std	Y+15, r9	; 0x0f

	// Create a FreeRTOS queue object which holds the given number of characters
	the_queue = xQueueCreate (queue_size, sizeof (char));
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	8b 2d       	mov	r24, r11
    1482:	0e 94 9d 04 	call	0x93a	; 0x93a <xQueueGenericCreate>
    1486:	88 87       	std	Y+8, r24	; 0x08
    1488:	99 87       	std	Y+9, r25	; 0x09

	// Store the wait time; it will be used when writing to the queue
	ticks_to_wait = a_wait_time;
    148a:	ca 86       	std	Y+10, r12	; 0x0a
    148c:	db 86       	std	Y+11, r13	; 0x0b
    148e:	ec 86       	std	Y+12, r14	; 0x0c
    1490:	fd 86       	std	Y+13, r15	; 0x0d
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	df 90       	pop	r13
    14a0:	cf 90       	pop	r12
    14a2:	bf 90       	pop	r11
    14a4:	9f 90       	pop	r9
    14a6:	8f 90       	pop	r8
    14a8:	08 95       	ret

000014aa <_Znaj>:
 *  @param g A pointer to some random thing
 */
extern "C"
{
void __cxa_guard_abort (__guard *g)
    {
    14aa:	0e 94 74 01 	call	0x2e8	; 0x2e8 <pvPortMalloc>
    14ae:	08 95       	ret

000014b0 <__cxa_pure_virtual>:
 */

extern "C"
{    
void __cxa_pure_virtual (void)
    {
    14b0:	08 95       	ret

000014b2 <_ZN7base232C1EjP12USART_struct>:
 *  @param baud_rate The desired baud rate for serial communications. Default is 9600
 *  @param port_number The number of the serial port, 0 or 1 (the second port numbered
 *                     1 only exists on some processors). The default is port 0 
 */

base232::base232 (unsigned int baud_rate, USART_t* p_usart)
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	fc 01       	movw	r30, r24
    14b8:	da 01       	movw	r26, r20
{
	// Store pointers to usart struct and port struct
	p_usart = p_usart;
	p_port = p_port;
	
	if(p_usart == &USARTC0)
    14ba:	40 3a       	cpi	r20, 0xA0	; 160
    14bc:	68 e0       	ldi	r22, 0x08	; 8
    14be:	56 07       	cpc	r21, r22
    14c0:	49 f4       	brne	.+18     	; 0x14d4 <_ZN7base232C1EjP12USART_struct+0x22>
	{
		p_port = &PORTC;
    14c2:	80 e4       	ldi	r24, 0x40	; 64
    14c4:	96 e0       	ldi	r25, 0x06	; 6
    14c6:	82 83       	std	Z+2, r24	; 0x02
    14c8:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    14ce:	83 e0       	ldi	r24, 0x03	; 3
    14d0:	85 83       	std	Z+5, r24	; 0x05
    14d2:	4c c0       	rjmp	.+152    	; 0x156c <_ZN7base232C1EjP12USART_struct+0xba>
	}
#ifdef USARTC1 
	else if(p_usart == &USARTC1)
    14d4:	40 3b       	cpi	r20, 0xB0	; 176
    14d6:	78 e0       	ldi	r23, 0x08	; 8
    14d8:	57 07       	cpc	r21, r23
    14da:	49 f4       	brne	.+18     	; 0x14ee <_ZN7base232C1EjP12USART_struct+0x3c>
	{
		p_port = &PORTC;
    14dc:	80 e4       	ldi	r24, 0x40	; 64
    14de:	96 e0       	ldi	r25, 0x06	; 6
    14e0:	82 83       	std	Z+2, r24	; 0x02
    14e2:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    14e4:	86 e0       	ldi	r24, 0x06	; 6
    14e6:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    14e8:	87 e0       	ldi	r24, 0x07	; 7
    14ea:	85 83       	std	Z+5, r24	; 0x05
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <_ZN7base232C1EjP12USART_struct+0xba>
	}
#endif
#ifdef USARTD0
	else if(p_usart == &USARTD0)
    14ee:	40 3a       	cpi	r20, 0xA0	; 160
    14f0:	89 e0       	ldi	r24, 0x09	; 9
    14f2:	58 07       	cpc	r21, r24
    14f4:	49 f4       	brne	.+18     	; 0x1508 <_ZN7base232C1EjP12USART_struct+0x56>
	{
		p_port = &PORTD;
    14f6:	80 e6       	ldi	r24, 0x60	; 96
    14f8:	96 e0       	ldi	r25, 0x06	; 6
    14fa:	82 83       	std	Z+2, r24	; 0x02
    14fc:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	85 83       	std	Z+5, r24	; 0x05
    1506:	32 c0       	rjmp	.+100    	; 0x156c <_ZN7base232C1EjP12USART_struct+0xba>
	}
#endif
#ifdef USARTD1 
	else if(p_usart == &USARTD1)
    1508:	40 3b       	cpi	r20, 0xB0	; 176
    150a:	69 e0       	ldi	r22, 0x09	; 9
    150c:	56 07       	cpc	r21, r22
    150e:	49 f4       	brne	.+18     	; 0x1522 <_ZN7base232C1EjP12USART_struct+0x70>
	{
		p_port = &PORTD;
    1510:	80 e6       	ldi	r24, 0x60	; 96
    1512:	96 e0       	ldi	r25, 0x06	; 6
    1514:	82 83       	std	Z+2, r24	; 0x02
    1516:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    1518:	86 e0       	ldi	r24, 0x06	; 6
    151a:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    151c:	87 e0       	ldi	r24, 0x07	; 7
    151e:	85 83       	std	Z+5, r24	; 0x05
    1520:	25 c0       	rjmp	.+74     	; 0x156c <_ZN7base232C1EjP12USART_struct+0xba>
	}
#endif
#ifdef USARTE0
	else if(p_usart == &USARTE0)
    1522:	40 3a       	cpi	r20, 0xA0	; 160
    1524:	7a e0       	ldi	r23, 0x0A	; 10
    1526:	57 07       	cpc	r21, r23
    1528:	49 f4       	brne	.+18     	; 0x153c <_ZN7base232C1EjP12USART_struct+0x8a>
	{
		p_port = &PORTE;
    152a:	80 e8       	ldi	r24, 0x80	; 128
    152c:	96 e0       	ldi	r25, 0x06	; 6
    152e:	82 83       	std	Z+2, r24	; 0x02
    1530:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    1532:	82 e0       	ldi	r24, 0x02	; 2
    1534:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	85 83       	std	Z+5, r24	; 0x05
    153a:	18 c0       	rjmp	.+48     	; 0x156c <_ZN7base232C1EjP12USART_struct+0xba>
	}
#endif
#ifdef USARTE1 
	else if(p_usart == &USARTE1)
    153c:	40 3b       	cpi	r20, 0xB0	; 176
    153e:	8a e0       	ldi	r24, 0x0A	; 10
    1540:	58 07       	cpc	r21, r24
    1542:	49 f4       	brne	.+18     	; 0x1556 <_ZN7base232C1EjP12USART_struct+0xa4>
	{
		p_port = &PORTE;
    1544:	80 e8       	ldi	r24, 0x80	; 128
    1546:	96 e0       	ldi	r25, 0x06	; 6
    1548:	82 83       	std	Z+2, r24	; 0x02
    154a:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 6;
    154c:	86 e0       	ldi	r24, 0x06	; 6
    154e:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 7;
    1550:	87 e0       	ldi	r24, 0x07	; 7
    1552:	85 83       	std	Z+5, r24	; 0x05
    1554:	0b c0       	rjmp	.+22     	; 0x156c <_ZN7base232C1EjP12USART_struct+0xba>
	}
#endif
#ifdef USARTF0 
	else if(p_usart == &USARTF0)
    1556:	40 3a       	cpi	r20, 0xA0	; 160
    1558:	5b 40       	sbci	r21, 0x0B	; 11
    155a:	41 f4       	brne	.+16     	; 0x156c <_ZN7base232C1EjP12USART_struct+0xba>
	{
		p_port = &PORTF;
    155c:	80 ea       	ldi	r24, 0xA0	; 160
    155e:	96 e0       	ldi	r25, 0x06	; 6
    1560:	82 83       	std	Z+2, r24	; 0x02
    1562:	93 83       	std	Z+3, r25	; 0x03
		rxd_pin = 2;
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	84 83       	std	Z+4, r24	; 0x04
		txd_pin = 3;
    1568:	83 e0       	ldi	r24, 0x03	; 3
    156a:	85 83       	std	Z+5, r24	; 0x05
	else
	{
	}
	
	// Store pointers to data, status, config registers
	p_UDR = &(p_usart->DATA);
    156c:	a6 83       	std	Z+6, r26	; 0x06
    156e:	b7 83       	std	Z+7, r27	; 0x07
	p_USR = &(p_usart->STATUS);
    1570:	cd 01       	movw	r24, r26
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	80 87       	std	Z+8, r24	; 0x08
    1576:	91 87       	std	Z+9, r25	; 0x09
	p_UCR = &(p_usart->CTRLB);
    1578:	03 96       	adiw	r24, 0x03	; 3
    157a:	82 87       	std	Z+10, r24	; 0x0a
    157c:	93 87       	std	Z+11, r25	; 0x0b
	
	// Set up TXD as an output that is high
	p_port->OUT |= (1 << txd_pin);
    157e:	25 81       	ldd	r18, Z+5	; 0x05
    1580:	c2 81       	ldd	r28, Z+2	; 0x02
    1582:	d3 81       	ldd	r29, Z+3	; 0x03
    1584:	4c 81       	ldd	r20, Y+4	; 0x04
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	bc 01       	movw	r22, r24
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <_ZN7base232C1EjP12USART_struct+0xe0>
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	2a 95       	dec	r18
    1594:	e2 f7       	brpl	.-8      	; 0x158e <_ZN7base232C1EjP12USART_struct+0xdc>
    1596:	9b 01       	movw	r18, r22
    1598:	24 2b       	or	r18, r20
    159a:	2c 83       	std	Y+4, r18	; 0x04
	p_port->DIR |= (1 << txd_pin);
    159c:	25 81       	ldd	r18, Z+5	; 0x05
    159e:	c2 81       	ldd	r28, Z+2	; 0x02
    15a0:	d3 81       	ldd	r29, Z+3	; 0x03
    15a2:	48 81       	ld	r20, Y
    15a4:	bc 01       	movw	r22, r24
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <_ZN7base232C1EjP12USART_struct+0xfa>
    15a8:	66 0f       	add	r22, r22
    15aa:	77 1f       	adc	r23, r23
    15ac:	2a 95       	dec	r18
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <_ZN7base232C1EjP12USART_struct+0xf6>
    15b0:	9b 01       	movw	r18, r22
    15b2:	24 2b       	or	r18, r20
    15b4:	28 83       	st	Y, r18
	
	// Set up RXD as an input
	p_port->DIR &= ~(1 << rxd_pin);
    15b6:	34 81       	ldd	r19, Z+4	; 0x04
    15b8:	c2 81       	ldd	r28, Z+2	; 0x02
    15ba:	d3 81       	ldd	r29, Z+3	; 0x03
    15bc:	28 81       	ld	r18, Y
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <_ZN7base232C1EjP12USART_struct+0x112>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	3a 95       	dec	r19
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <_ZN7base232C1EjP12USART_struct+0x10e>
    15c8:	80 95       	com	r24
    15ca:	90 95       	com	r25
    15cc:	82 23       	and	r24, r18
    15ce:	88 83       	st	Y, r24
	
	// Enable interrupts for RX at high priority
	p_usart->CTRLA = (0 << USART_RXCINTLVL1_bp | 1 << USART_RXCINTLVL0_bp);
    15d0:	80 e1       	ldi	r24, 0x10	; 16
    15d2:	13 96       	adiw	r26, 0x03	; 3
    15d4:	8c 93       	st	X, r24
    15d6:	13 97       	sbiw	r26, 0x03	; 3
	
	// Select USART Asynchronous Mode and choose character size
	p_usart->CTRLC = (1 << USART_CHSIZE0_bp | 1 << USART_CHSIZE1_bp );
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	15 96       	adiw	r26, 0x05	; 5
    15dc:	8c 93       	st	X, r24
    15de:	15 97       	sbiw	r26, 0x05	; 5

	// Select the baudrate according to Table 23-5 in the datasheet
	p_usart->BAUDCTRLB = (-1 << USART_BSCALE0_bp);
    15e0:	80 ef       	ldi	r24, 0xF0	; 240
    15e2:	17 96       	adiw	r26, 0x07	; 7
    15e4:	8c 93       	st	X, r24
    15e6:	17 97       	sbiw	r26, 0x07	; 7
	p_usart->BAUDCTRLA = (33 << USART_BSEL0_bp);
    15e8:	81 e2       	ldi	r24, 0x21	; 33
    15ea:	16 96       	adiw	r26, 0x06	; 6
    15ec:	8c 93       	st	X, r24
    15ee:	16 97       	sbiw	r26, 0x06	; 6

	// Enable the RX and TX devices
	p_usart->CTRLB = (1 << USART_RXEN_bp | 1<< USART_TXEN_bp);
    15f0:	88 e1       	ldi	r24, 0x18	; 24
    15f2:	14 96       	adiw	r26, 0x04	; 4
    15f4:	8c 93       	st	X, r24

	// Save some masks
	mask_RXC = USART_RXCIF_bm;
    15f6:	80 e8       	ldi	r24, 0x80	; 128
    15f8:	85 87       	std	Z+13, r24	; 0x0d
	mask_TXC = USART_TXCIF_bm;
    15fa:	80 e4       	ldi	r24, 0x40	; 64
    15fc:	86 87       	std	Z+14, r24	; 0x0e
	mask_UDRE = USART_DREIF_bm;
    15fe:	80 e2       	ldi	r24, 0x20	; 32
    1600:	84 87       	std	Z+12, r24	; 0x0c
	
	// Read the data register to ensure that it's empty
	p_UDR[0]; p_UDR[0];
    1602:	06 80       	ldd	r0, Z+6	; 0x06
    1604:	f7 81       	ldd	r31, Z+7	; 0x07
    1606:	e0 2d       	mov	r30, r0
    1608:	80 81       	ld	r24, Z
    160a:	80 81       	ld	r24, Z
}
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	08 95       	ret

00001612 <_ZN8emstream13ready_to_sendEv>:
		digits = 7;
	}
	bts_glob_prec = digits;

	return (manip_set_precision);
}
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	08 95       	ret

00001616 <_ZN8emstream7getcharEv>:
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	08 95       	ret

0000161c <_ZN8emstream14check_for_charEv>:
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	08 95       	ret

00001620 <_ZN8emstream12transmit_nowEv>:
    1620:	08 95       	ret

00001622 <_ZN8emstream12clear_screenEv>:
    1622:	08 95       	ret

00001624 <_ZN8emstreamC1Ev>:
    1624:	fc 01       	movw	r30, r24
    1626:	8a e1       	ldi	r24, 0x1A	; 26
    1628:	90 e2       	ldi	r25, 0x20	; 32
    162a:	80 83       	st	Z, r24
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	8a e0       	ldi	r24, 0x0A	; 10
    1630:	82 83       	std	Z+2, r24	; 0x02
    1632:	13 82       	std	Z+3, r1	; 0x03
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	85 83       	std	Z+5, r24	; 0x05
    1638:	14 82       	std	Z+4, r1	; 0x04
    163a:	16 82       	std	Z+6, r1	; 0x06
    163c:	17 82       	std	Z+7, r1	; 0x07
    163e:	08 95       	ret

00001640 <_ZN8emstream4putsEPKc>:
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	8c 01       	movw	r16, r24
    164a:	fb 01       	movw	r30, r22
    164c:	dc 01       	movw	r26, r24
    164e:	14 96       	adiw	r26, 0x04	; 4
    1650:	8c 91       	ld	r24, X
    1652:	81 11       	cpse	r24, r1
    1654:	04 c0       	rjmp	.+8      	; 0x165e <_ZN8emstream4putsEPKc+0x1e>
    1656:	60 81       	ld	r22, Z
    1658:	61 11       	cpse	r22, r1
    165a:	17 c0       	rjmp	.+46     	; 0x168a <_ZN8emstream4putsEPKc+0x4a>
    165c:	23 c0       	rjmp	.+70     	; 0x16a4 <_ZN8emstream4putsEPKc+0x64>
    165e:	d8 01       	movw	r26, r16
    1660:	14 96       	adiw	r26, 0x04	; 4
    1662:	1c 92       	st	X, r1
    1664:	eb 01       	movw	r28, r22
    1666:	21 96       	adiw	r28, 0x01	; 1
    1668:	64 91       	lpm	r22, Z
    166a:	66 23       	and	r22, r22
    166c:	d9 f0       	breq	.+54     	; 0x16a4 <_ZN8emstream4putsEPKc+0x64>
    166e:	d8 01       	movw	r26, r16
    1670:	ed 91       	ld	r30, X+
    1672:	fc 91       	ld	r31, X
    1674:	02 80       	ldd	r0, Z+2	; 0x02
    1676:	f3 81       	ldd	r31, Z+3	; 0x03
    1678:	e0 2d       	mov	r30, r0
    167a:	c8 01       	movw	r24, r16
    167c:	19 95       	eicall
    167e:	fe 01       	movw	r30, r28
    1680:	64 91       	lpm	r22, Z
    1682:	21 96       	adiw	r28, 0x01	; 1
    1684:	61 11       	cpse	r22, r1
    1686:	f3 cf       	rjmp	.-26     	; 0x166e <_ZN8emstream4putsEPKc+0x2e>
    1688:	0d c0       	rjmp	.+26     	; 0x16a4 <_ZN8emstream4putsEPKc+0x64>
    168a:	ef 01       	movw	r28, r30
    168c:	21 96       	adiw	r28, 0x01	; 1
    168e:	d8 01       	movw	r26, r16
    1690:	ed 91       	ld	r30, X+
    1692:	fc 91       	ld	r31, X
    1694:	02 80       	ldd	r0, Z+2	; 0x02
    1696:	f3 81       	ldd	r31, Z+3	; 0x03
    1698:	e0 2d       	mov	r30, r0
    169a:	c8 01       	movw	r24, r16
    169c:	19 95       	eicall
    169e:	69 91       	ld	r22, Y+
    16a0:	61 11       	cpse	r22, r1
    16a2:	f5 cf       	rjmp	.-22     	; 0x168e <_ZN8emstream4putsEPKc+0x4e>
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret

000016ae <_ZN8emstreamlsE15ser_manipulator>:
 *  @return A reference to the serial device to which the data was printed. This
 *          reference is used to string printable items together with "<<" operators
 */

emstream& emstream::operator<< (ser_manipulator new_manip)
{
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	ec 01       	movw	r28, r24
	switch (new_manip)
    16b4:	86 2f       	mov	r24, r22
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	8b 30       	cpi	r24, 0x0B	; 11
    16ba:	91 05       	cpc	r25, r1
    16bc:	d8 f5       	brcc	.+118    	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
    16be:	fc 01       	movw	r30, r24
    16c0:	88 27       	eor	r24, r24
    16c2:	e2 50       	subi	r30, 0x02	; 2
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	8f 4f       	sbci	r24, 0xFF	; 255
    16c8:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__tablejump2__>
	{
		case (bin):                         // Print integers in binary
			base = 2;
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	8a 83       	std	Y+2, r24	; 0x02
			break;
    16d0:	31 c0       	rjmp	.+98     	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (oct):                         // Print integers in octal
			base = 8;
    16d2:	88 e0       	ldi	r24, 0x08	; 8
    16d4:	8a 83       	std	Y+2, r24	; 0x02
			break;
    16d6:	2e c0       	rjmp	.+92     	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (dec):                         // Print integers in decimal
			base = 10;
    16d8:	8a e0       	ldi	r24, 0x0A	; 10
    16da:	8a 83       	std	Y+2, r24	; 0x02
			break;
    16dc:	2b c0       	rjmp	.+86     	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (hex):                         // Print integers in hexadecimal
			base = 16;
    16de:	80 e1       	ldi	r24, 0x10	; 16
    16e0:	8a 83       	std	Y+2, r24	; 0x02
			break;
    16e2:	28 c0       	rjmp	.+80     	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (ascii):                       // Print chars as ASCII letters, etc.
			print_ascii = true;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	8b 83       	std	Y+3, r24	; 0x03
			break;
    16e8:	25 c0       	rjmp	.+74     	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (numeric):                     // Print chars as numbers
			print_ascii = false;
    16ea:	1b 82       	std	Y+3, r1	; 0x03
			break;
    16ec:	23 c0       	rjmp	.+70     	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (endl):                        // Send an end-of-line
			ENDL_STYLE ();
    16ee:	e8 81       	ld	r30, Y
    16f0:	f9 81       	ldd	r31, Y+1	; 0x01
    16f2:	02 80       	ldd	r0, Z+2	; 0x02
    16f4:	f3 81       	ldd	r31, Z+3	; 0x03
    16f6:	e0 2d       	mov	r30, r0
    16f8:	6d e0       	ldi	r22, 0x0D	; 13
    16fa:	ce 01       	movw	r24, r28
    16fc:	19 95       	eicall
    16fe:	e8 81       	ld	r30, Y
    1700:	f9 81       	ldd	r31, Y+1	; 0x01
    1702:	02 80       	ldd	r0, Z+2	; 0x02
    1704:	f3 81       	ldd	r31, Z+3	; 0x03
    1706:	e0 2d       	mov	r30, r0
    1708:	6a e0       	ldi	r22, 0x0A	; 10
    170a:	ce 01       	movw	r24, r28
    170c:	19 95       	eicall
			break;
    170e:	12 c0       	rjmp	.+36     	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (clrscr):                      // Send a clear-screen code
			clear_screen ();
    1710:	e8 81       	ld	r30, Y
    1712:	f9 81       	ldd	r31, Y+1	; 0x01
    1714:	02 84       	ldd	r0, Z+10	; 0x0a
    1716:	f3 85       	ldd	r31, Z+11	; 0x0b
    1718:	e0 2d       	mov	r30, r0
    171a:	ce 01       	movw	r24, r28
    171c:	19 95       	eicall
			break;
    171e:	0a c0       	rjmp	.+20     	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (send_now):                    // Send whatever's in the send buffer
			transmit_now ();
    1720:	e8 81       	ld	r30, Y
    1722:	f9 81       	ldd	r31, Y+1	; 0x01
    1724:	00 84       	ldd	r0, Z+8	; 0x08
    1726:	f1 85       	ldd	r31, Z+9	; 0x09
    1728:	e0 2d       	mov	r30, r0
    172a:	ce 01       	movw	r24, r28
    172c:	19 95       	eicall
			break;
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <_ZN8emstreamlsE15ser_manipulator+0x86>
		case (_p_str):                      // The next string is in program memory
			pgm_string = true;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	8c 83       	std	Y+4, r24	; 0x04
		case (manip_set_precision):         // Set precision for printing floats
			break;
	};

	return (*this);
}
    1734:	ce 01       	movw	r24, r28
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <_ZN8emstreamlsEi>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 16-bit number to be sent out
 */

emstream& emstream::operator<< (int16_t num)
{
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	61 97       	sbiw	r28, 0x11	; 17
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	8c 01       	movw	r16, r24
    1750:	9b 01       	movw	r18, r22
	if (base != 10)
    1752:	fc 01       	movw	r30, r24
    1754:	92 81       	ldd	r25, Z+2	; 0x02
    1756:	9a 30       	cpi	r25, 0x0A	; 10
    1758:	21 f0       	breq	.+8      	; 0x1762 <_ZN8emstreamlsEi+0x26>
	{
		*this << (uint16_t)num;
    175a:	c8 01       	movw	r24, r16
    175c:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN8emstreamlsEj>
    1760:	0d c0       	rjmp	.+26     	; 0x177c <_ZN8emstreamlsEi+0x40>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1762:	4a e0       	ldi	r20, 0x0A	; 10
    1764:	be 01       	movw	r22, r28
    1766:	6f 5f       	subi	r22, 0xFF	; 255
    1768:	7f 4f       	sbci	r23, 0xFF	; 255
    176a:	c9 01       	movw	r24, r18
    176c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__itoa_ncheck>
	else
	{
		char out_str[17];

		itoa (num, out_str, base);
		puts (out_str);
    1770:	be 01       	movw	r22, r28
    1772:	6f 5f       	subi	r22, 0xFF	; 255
    1774:	7f 4f       	sbci	r23, 0xFF	; 255
    1776:	c8 01       	movw	r24, r16
    1778:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN8emstream4putsEPKc>
	}

	return (*this);
}
    177c:	c8 01       	movw	r24, r16
    177e:	61 96       	adiw	r28, 0x11	; 17
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	08 95       	ret

0000178e <_ZN8emstreamlsEj>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 16-bit number to be sent out
 */

emstream& emstream::operator<< (uint16_t num)
{
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	61 97       	sbiw	r28, 0x11	; 17
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	8c 01       	movw	r16, r24
    17a4:	f6 2e       	mov	r15, r22
    17a6:	97 2f       	mov	r25, r23
	if (base == 16 || base == 8 || base == 2)
    17a8:	f8 01       	movw	r30, r16
    17aa:	42 81       	ldd	r20, Z+2	; 0x02
    17ac:	40 31       	cpi	r20, 0x10	; 16
    17ae:	21 f0       	breq	.+8      	; 0x17b8 <_ZN8emstreamlsEj+0x2a>
    17b0:	48 30       	cpi	r20, 0x08	; 8
    17b2:	11 f0       	breq	.+4      	; 0x17b8 <_ZN8emstreamlsEj+0x2a>
    17b4:	42 30       	cpi	r20, 0x02	; 2
    17b6:	41 f4       	brne	.+16     	; 0x17c8 <_ZN8emstreamlsEj+0x3a>
		{
			uint16_t whole;
			uint8_t bits[2];
		} parts;
		parts.whole = num;
		*this << parts.bits[1] << parts.bits[0];
    17b8:	69 2f       	mov	r22, r25
    17ba:	c8 01       	movw	r24, r16
    17bc:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN8emstreamlsEh>
    17c0:	6f 2d       	mov	r22, r15
    17c2:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN8emstreamlsEh>
    17c6:	0d c0       	rjmp	.+26     	; 0x17e2 <_ZN8emstreamlsEj+0x54>
extern __inline__ __ATTR_GNU_INLINE__
char *utoa (unsigned int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__utoa (unsigned int, char *, int);
	return __utoa (__val, __s, __radix);
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	be 01       	movw	r22, r28
    17cc:	6f 5f       	subi	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8f 2d       	mov	r24, r15
    17d2:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <utoa>
	}
	else
	{
		char out_str[17];
		utoa (num, out_str, base);
		puts (out_str);
    17d6:	be 01       	movw	r22, r28
    17d8:	6f 5f       	subi	r22, 0xFF	; 255
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	c8 01       	movw	r24, r16
    17de:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN8emstream4putsEPKc>
	}

	return (*this);
}
    17e2:	c8 01       	movw	r24, r16
    17e4:	61 96       	adiw	r28, 0x11	; 17
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	ff 90       	pop	r15
    17f4:	08 95       	ret

000017f6 <_ZN8emstreamlsEh>:
 *          reference is used to string printable items together with "<<" operators
 *  @param num The 8-bit number or character to be sent out
 */

emstream& emstream::operator<< (uint8_t num)
{
    17f6:	cf 92       	push	r12
    17f8:	df 92       	push	r13
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	29 97       	sbiw	r28, 0x09	; 9
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	8c 01       	movw	r16, r24
    1812:	e6 2e       	mov	r14, r22
	uint8_t temp_char;                      // Temporary storage for a nibble

	if (print_ascii)
    1814:	dc 01       	movw	r26, r24
    1816:	13 96       	adiw	r26, 0x03	; 3
    1818:	8c 91       	ld	r24, X
    181a:	13 97       	sbiw	r26, 0x03	; 3
    181c:	88 23       	and	r24, r24
    181e:	41 f0       	breq	.+16     	; 0x1830 <_ZN8emstreamlsEh+0x3a>
	{
		putchar (num);
    1820:	ed 91       	ld	r30, X+
    1822:	fc 91       	ld	r31, X
    1824:	02 80       	ldd	r0, Z+2	; 0x02
    1826:	f3 81       	ldd	r31, Z+3	; 0x03
    1828:	e0 2d       	mov	r30, r0
    182a:	c8 01       	movw	r24, r16
    182c:	19 95       	eicall
    182e:	56 c0       	rjmp	.+172    	; 0x18dc <_ZN8emstreamlsEh+0xe6>
	}
	else if (base == 2)
    1830:	f8 01       	movw	r30, r16
    1832:	42 81       	ldd	r20, Z+2	; 0x02
    1834:	42 30       	cpi	r20, 0x02	; 2
    1836:	19 f5       	brne	.+70     	; 0x187e <_ZN8emstreamlsEh+0x88>
    1838:	68 94       	set
    183a:	cc 24       	eor	r12, r12
    183c:	c3 f8       	bld	r12, 3
    183e:	d1 2c       	mov	r13, r1
    1840:	68 94       	set
    1842:	ff 24       	eor	r15, r15
    1844:	f7 f8       	bld	r15, 7
	{
		for (uint8_t bmask = 0x80; bmask != 0; bmask >>= 1)
		{
			if (num & bmask) putchar ('1');
    1846:	8e 2d       	mov	r24, r14
    1848:	8f 21       	and	r24, r15
    184a:	51 f0       	breq	.+20     	; 0x1860 <_ZN8emstreamlsEh+0x6a>
    184c:	d8 01       	movw	r26, r16
    184e:	ed 91       	ld	r30, X+
    1850:	fc 91       	ld	r31, X
    1852:	02 80       	ldd	r0, Z+2	; 0x02
    1854:	f3 81       	ldd	r31, Z+3	; 0x03
    1856:	e0 2d       	mov	r30, r0
    1858:	61 e3       	ldi	r22, 0x31	; 49
    185a:	c8 01       	movw	r24, r16
    185c:	19 95       	eicall
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <_ZN8emstreamlsEh+0x7c>
			else             putchar ('0');
    1860:	d8 01       	movw	r26, r16
    1862:	ed 91       	ld	r30, X+
    1864:	fc 91       	ld	r31, X
    1866:	02 80       	ldd	r0, Z+2	; 0x02
    1868:	f3 81       	ldd	r31, Z+3	; 0x03
    186a:	e0 2d       	mov	r30, r0
    186c:	60 e3       	ldi	r22, 0x30	; 48
    186e:	c8 01       	movw	r24, r16
    1870:	19 95       	eicall
	{
		putchar (num);
	}
	else if (base == 2)
	{
		for (uint8_t bmask = 0x80; bmask != 0; bmask >>= 1)
    1872:	f6 94       	lsr	r15
    1874:	b1 e0       	ldi	r27, 0x01	; 1
    1876:	cb 1a       	sub	r12, r27
    1878:	d1 08       	sbc	r13, r1
    187a:	29 f7       	brne	.-54     	; 0x1846 <_ZN8emstreamlsEh+0x50>
    187c:	2f c0       	rjmp	.+94     	; 0x18dc <_ZN8emstreamlsEh+0xe6>
		{
			if (num & bmask) putchar ('1');
			else             putchar ('0');
		}
	}
	else if (base == 16)
    187e:	40 31       	cpi	r20, 0x10	; 16
    1880:	f9 f4       	brne	.+62     	; 0x18c0 <_ZN8emstreamlsEh+0xca>
	{
		temp_char = (num >> 4) & 0x0F;
    1882:	62 95       	swap	r22
    1884:	6f 70       	andi	r22, 0x0F	; 15
		putchar ((temp_char > 9) ? temp_char + ('A' - 10) : temp_char + '0');
    1886:	01 90       	ld	r0, Z+
    1888:	f0 81       	ld	r31, Z
    188a:	e0 2d       	mov	r30, r0
    188c:	02 80       	ldd	r0, Z+2	; 0x02
    188e:	f3 81       	ldd	r31, Z+3	; 0x03
    1890:	e0 2d       	mov	r30, r0
    1892:	6a 30       	cpi	r22, 0x0A	; 10
    1894:	10 f0       	brcs	.+4      	; 0x189a <_ZN8emstreamlsEh+0xa4>
    1896:	69 5c       	subi	r22, 0xC9	; 201
    1898:	01 c0       	rjmp	.+2      	; 0x189c <_ZN8emstreamlsEh+0xa6>
    189a:	60 5d       	subi	r22, 0xD0	; 208
    189c:	c8 01       	movw	r24, r16
    189e:	19 95       	eicall
		temp_char = num & 0x0F;
    18a0:	6e 2d       	mov	r22, r14
    18a2:	6f 70       	andi	r22, 0x0F	; 15
		putchar ((temp_char > 9) ? temp_char + ('A' - 10) : temp_char + '0');
    18a4:	d8 01       	movw	r26, r16
    18a6:	ed 91       	ld	r30, X+
    18a8:	fc 91       	ld	r31, X
    18aa:	02 80       	ldd	r0, Z+2	; 0x02
    18ac:	f3 81       	ldd	r31, Z+3	; 0x03
    18ae:	e0 2d       	mov	r30, r0
    18b0:	6a 30       	cpi	r22, 0x0A	; 10
    18b2:	10 f0       	brcs	.+4      	; 0x18b8 <_ZN8emstreamlsEh+0xc2>
    18b4:	69 5c       	subi	r22, 0xC9	; 201
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <_ZN8emstreamlsEh+0xc4>
    18b8:	60 5d       	subi	r22, 0xD0	; 208
    18ba:	c8 01       	movw	r24, r16
    18bc:	19 95       	eicall
    18be:	0e c0       	rjmp	.+28     	; 0x18dc <_ZN8emstreamlsEh+0xe6>
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	be 01       	movw	r22, r28
    18c4:	6f 5f       	subi	r22, 0xFF	; 255
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	8e 2d       	mov	r24, r14
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <utoa>
	}
	else
	{
		char out_str[9];
		utoa ((uint16_t)num, out_str, base);
		puts (out_str);
    18d0:	be 01       	movw	r22, r28
    18d2:	6f 5f       	subi	r22, 0xFF	; 255
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	c8 01       	movw	r24, r16
    18d8:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN8emstream4putsEPKc>
	}
	return (*this);
}
    18dc:	c8 01       	movw	r24, r16
    18de:	29 96       	adiw	r28, 0x09	; 9
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	08 95       	ret

000018f6 <_ZN5rs2327putcharEc>:
 *  @param chout The character to be sent out
 *  @return True if everything was OK and false if there was a timeout
 */

bool rs232::putchar (char chout)
{
    18f6:	dc 01       	movw	r26, r24
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
    18f8:	50 96       	adiw	r26, 0x10	; 16
    18fa:	ed 91       	ld	r30, X+
    18fc:	fc 91       	ld	r31, X
    18fe:	51 97       	sbiw	r26, 0x11	; 17
    1900:	80 81       	ld	r24, Z
    1902:	54 96       	adiw	r26, 0x14	; 20
    1904:	4c 91       	ld	r20, X
    1906:	54 97       	sbiw	r26, 0x14	; 20
    1908:	84 23       	and	r24, r20
    190a:	29 f0       	breq	.+10     	; 0x1916 <_ZN5rs2327putcharEc+0x20>
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <_ZN5rs2327putcharEc+0x2a>
    190e:	21 50       	subi	r18, 0x01	; 1
    1910:	31 09       	sbc	r19, r1
	{
		if (count > UART_TX_TOUT)
    1912:	19 f4       	brne	.+6      	; 0x191a <_ZN5rs2327putcharEc+0x24>
    1914:	12 c0       	rjmp	.+36     	; 0x193a <_ZN5rs2327putcharEc+0x44>
 */

bool rs232::putchar (char chout)
{
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
    1916:	21 e2       	ldi	r18, 0x21	; 33
    1918:	3e e4       	ldi	r19, 0x4E	; 78
    191a:	90 81       	ld	r25, Z
    191c:	94 23       	and	r25, r20
    191e:	b9 f3       	breq	.-18     	; 0x190e <_ZN5rs2327putcharEc+0x18>
	}

	// Clear the TXCn bit so it can be used to check if the serial port is busy.  This
	// check needs to be done prior to putting the processor into sleep mode.  Oddly,
	// the TXCn bit is cleared by writing a one to its bit location
	*p_USR |= mask_TXC;
    1920:	90 81       	ld	r25, Z
    1922:	56 96       	adiw	r26, 0x16	; 22
    1924:	8c 91       	ld	r24, X
    1926:	56 97       	sbiw	r26, 0x16	; 22
    1928:	89 2b       	or	r24, r25
    192a:	80 83       	st	Z, r24

	// The CTS line is 0 and the transmitter buffer is empty, so send the character
	*p_UDR = chout;
    192c:	1e 96       	adiw	r26, 0x0e	; 14
    192e:	ed 91       	ld	r30, X+
    1930:	fc 91       	ld	r31, X
    1932:	1f 97       	sbiw	r26, 0x0f	; 15
    1934:	60 83       	st	Z, r22
	return (true);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	08 95       	ret
{
	// Now wait for the serial port transmitter buffer to be empty	 
	for (uint16_t count = 0; ((*p_USR & mask_UDRE) == 0); count++)
	{
		if (count > UART_TX_TOUT)
			return (false);
    193a:	80 e0       	ldi	r24, 0x00	; 0
	*p_USR |= mask_TXC;

	// The CTS line is 0 and the transmitter buffer is empty, so send the character
	*p_UDR = chout;
	return (true);
}
    193c:	08 95       	ret

0000193e <_ZN5rs2327getcharEv>:
 *  check_for_char() to ensure that there's data available first. 
 *  @return The character which was found in the serial port receive buffer
 */

int16_t rs232::getchar (void)
{
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	fc 01       	movw	r30, r24
	uint8_t recv_char;						// Character read from the queue

	// Wait until there's a character in the receiver queue
	while (*p_rcv_read_index == *p_rcv_write_index);
    1944:	c1 8d       	ldd	r28, Z+25	; 0x19
    1946:	d2 8d       	ldd	r29, Z+26	; 0x1a
    1948:	28 81       	ld	r18, Y
    194a:	39 81       	ldd	r19, Y+1	; 0x01
    194c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    194e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1950:	4d 91       	ld	r20, X+
    1952:	5c 91       	ld	r21, X
    1954:	24 17       	cp	r18, r20
    1956:	35 07       	cpc	r19, r21
    1958:	e9 f3       	breq	.-6      	; 0x1954 <_ZN5rs2327getcharEv+0x16>
	recv_char = (*p_rcv_buffer)[*p_rcv_read_index];
    195a:	a7 89       	ldd	r26, Z+23	; 0x17
    195c:	b0 8d       	ldd	r27, Z+24	; 0x18
    195e:	0d 90       	ld	r0, X+
    1960:	bc 91       	ld	r27, X
    1962:	a0 2d       	mov	r26, r0
    1964:	a2 0f       	add	r26, r18
    1966:	b3 1f       	adc	r27, r19
    1968:	8c 91       	ld	r24, X
	if (++(*p_rcv_read_index) >= RSINT_BUF_SIZE)
    196a:	2f 5f       	subi	r18, 0xFF	; 255
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	28 83       	st	Y, r18
    1970:	39 83       	std	Y+1, r19	; 0x01
    1972:	24 36       	cpi	r18, 0x64	; 100
    1974:	31 05       	cpc	r19, r1
    1976:	28 f0       	brcs	.+10     	; 0x1982 <_ZN5rs2327getcharEv+0x44>
		*p_rcv_read_index = 0;
    1978:	01 8c       	ldd	r0, Z+25	; 0x19
    197a:	f2 8d       	ldd	r31, Z+26	; 0x1a
    197c:	e0 2d       	mov	r30, r0
    197e:	10 82       	st	Z, r1
    1980:	11 82       	std	Z+1, r1	; 0x01

	return (recv_char);
}
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	08 95       	ret

0000198a <_ZN5rs23214check_for_charEv>:
 *  caused an interrupt. 
 *  @return True for character available, false for no character available
 */

bool rs232::check_for_char (void)
{
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
	return (*p_rcv_read_index != *p_rcv_write_index);
    198e:	ec 01       	movw	r28, r24
    1990:	a9 8d       	ldd	r26, Y+25	; 0x19
    1992:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1994:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1996:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	4d 91       	ld	r20, X+
    199c:	5c 91       	ld	r21, X
    199e:	20 81       	ld	r18, Z
    19a0:	31 81       	ldd	r19, Z+1	; 0x01
    19a2:	42 17       	cp	r20, r18
    19a4:	53 07       	cpc	r21, r19
    19a6:	09 f4       	brne	.+2      	; 0x19aa <_ZN5rs23214check_for_charEv+0x20>
    19a8:	80 e0       	ldi	r24, 0x00	; 0
}
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <_ZN5rs23212clear_screenEv>:
 *  format modifier 'clrscr' is inserted in a line of "<<" stuff.
 */

void rs232::clear_screen (void)
{
	putchar (CLRSCR_STYLE);
    19b0:	dc 01       	movw	r26, r24
    19b2:	ed 91       	ld	r30, X+
    19b4:	fc 91       	ld	r31, X
    19b6:	02 80       	ldd	r0, Z+2	; 0x02
    19b8:	f3 81       	ldd	r31, Z+3	; 0x03
    19ba:	e0 2d       	mov	r30, r0
    19bc:	6c e0       	ldi	r22, 0x0C	; 12
    19be:	19 95       	eicall
    19c0:	08 95       	ret

000019c2 <_ZN5rs232C1EjP12USART_struct>:
 *  @param baud_rate The desired baud rate for serial communications. Default is 9600
 *  @param p_usart A pointer to the desired USART c-struct. The default is USARTC0. On an
 *                 XMGEGA choices are C0, C1, D0, D1, E0, E1, F0  
 */

rs232::rs232 (uint16_t baud_rate, USART_t* p_usart)
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	ec 01       	movw	r28, r24
    19d0:	7b 01       	movw	r14, r22
    19d2:	8a 01       	movw	r16, r20
	: emstream (), base232 (baud_rate, p_usart)
    19d4:	0e 94 12 0b 	call	0x1624	; 0x1624 <_ZN8emstreamC1Ev>
    19d8:	a8 01       	movw	r20, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	ce 01       	movw	r24, r28
    19de:	08 96       	adiw	r24, 0x08	; 8
    19e0:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN7base232C1EjP12USART_struct>
    19e4:	8a e2       	ldi	r24, 0x2A	; 42
    19e6:	90 e2       	ldi	r25, 0x20	; 32
    19e8:	88 83       	st	Y, r24
    19ea:	99 83       	std	Y+1, r25	; 0x01
{
	if(p_usart == &USARTC0)
    19ec:	00 3a       	cpi	r16, 0xA0	; 160
    19ee:	88 e0       	ldi	r24, 0x08	; 8
    19f0:	18 07       	cpc	r17, r24
    19f2:	69 f4       	brne	.+26     	; 0x1a0e <_ZN5rs232C1EjP12USART_struct+0x4c>
	{
		p_rcv_buffer		= &rcvC0_buffer;
    19f4:	85 ee       	ldi	r24, 0xE5	; 229
    19f6:	90 e3       	ldi	r25, 0x30	; 48
    19f8:	8f 8b       	std	Y+23, r24	; 0x17
    19fa:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvC0_read_index;
    19fc:	87 ed       	ldi	r24, 0xD7	; 215
    19fe:	90 e3       	ldi	r25, 0x30	; 48
    1a00:	89 8f       	std	Y+25, r24	; 0x19
    1a02:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvC0_write_index;
    1a04:	89 ec       	ldi	r24, 0xC9	; 201
    1a06:	90 e3       	ldi	r25, 0x30	; 48
    1a08:	8b 8f       	std	Y+27, r24	; 0x1b
    1a0a:	9c 8f       	std	Y+28, r25	; 0x1c
    1a0c:	64 c0       	rjmp	.+200    	; 0x1ad6 <_ZN5rs232C1EjP12USART_struct+0x114>
	}
#ifdef USARTC1
	else if(p_usart == &USARTC1)
    1a0e:	00 3b       	cpi	r16, 0xB0	; 176
    1a10:	e8 e0       	ldi	r30, 0x08	; 8
    1a12:	1e 07       	cpc	r17, r30
    1a14:	69 f4       	brne	.+26     	; 0x1a30 <_ZN5rs232C1EjP12USART_struct+0x6e>
	{
		p_rcv_buffer		= &rcvC1_buffer;
    1a16:	83 ee       	ldi	r24, 0xE3	; 227
    1a18:	90 e3       	ldi	r25, 0x30	; 48
    1a1a:	8f 8b       	std	Y+23, r24	; 0x17
    1a1c:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvC1_read_index;
    1a1e:	85 ed       	ldi	r24, 0xD5	; 213
    1a20:	90 e3       	ldi	r25, 0x30	; 48
    1a22:	89 8f       	std	Y+25, r24	; 0x19
    1a24:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvC1_write_index;
    1a26:	87 ec       	ldi	r24, 0xC7	; 199
    1a28:	90 e3       	ldi	r25, 0x30	; 48
    1a2a:	8b 8f       	std	Y+27, r24	; 0x1b
    1a2c:	9c 8f       	std	Y+28, r25	; 0x1c
    1a2e:	53 c0       	rjmp	.+166    	; 0x1ad6 <_ZN5rs232C1EjP12USART_struct+0x114>
	}
#endif
#ifdef USARTD0
	else if(p_usart == &USARTD0)
    1a30:	00 3a       	cpi	r16, 0xA0	; 160
    1a32:	f9 e0       	ldi	r31, 0x09	; 9
    1a34:	1f 07       	cpc	r17, r31
    1a36:	69 f4       	brne	.+26     	; 0x1a52 <_ZN5rs232C1EjP12USART_struct+0x90>
	{
		p_rcv_buffer		= &rcvD0_buffer;
    1a38:	81 ee       	ldi	r24, 0xE1	; 225
    1a3a:	90 e3       	ldi	r25, 0x30	; 48
    1a3c:	8f 8b       	std	Y+23, r24	; 0x17
    1a3e:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvD0_read_index;
    1a40:	83 ed       	ldi	r24, 0xD3	; 211
    1a42:	90 e3       	ldi	r25, 0x30	; 48
    1a44:	89 8f       	std	Y+25, r24	; 0x19
    1a46:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvD0_write_index;
    1a48:	85 ec       	ldi	r24, 0xC5	; 197
    1a4a:	90 e3       	ldi	r25, 0x30	; 48
    1a4c:	8b 8f       	std	Y+27, r24	; 0x1b
    1a4e:	9c 8f       	std	Y+28, r25	; 0x1c
    1a50:	42 c0       	rjmp	.+132    	; 0x1ad6 <_ZN5rs232C1EjP12USART_struct+0x114>
	}
#endif
#ifdef USARTD1
	else if(p_usart == &USARTD1)
    1a52:	00 3b       	cpi	r16, 0xB0	; 176
    1a54:	89 e0       	ldi	r24, 0x09	; 9
    1a56:	18 07       	cpc	r17, r24
    1a58:	69 f4       	brne	.+26     	; 0x1a74 <_ZN5rs232C1EjP12USART_struct+0xb2>
	{
		p_rcv_buffer		= &rcvD1_buffer;
    1a5a:	8f ed       	ldi	r24, 0xDF	; 223
    1a5c:	90 e3       	ldi	r25, 0x30	; 48
    1a5e:	8f 8b       	std	Y+23, r24	; 0x17
    1a60:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvD1_read_index;
    1a62:	81 ed       	ldi	r24, 0xD1	; 209
    1a64:	90 e3       	ldi	r25, 0x30	; 48
    1a66:	89 8f       	std	Y+25, r24	; 0x19
    1a68:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvD1_write_index;
    1a6a:	83 ec       	ldi	r24, 0xC3	; 195
    1a6c:	90 e3       	ldi	r25, 0x30	; 48
    1a6e:	8b 8f       	std	Y+27, r24	; 0x1b
    1a70:	9c 8f       	std	Y+28, r25	; 0x1c
    1a72:	31 c0       	rjmp	.+98     	; 0x1ad6 <_ZN5rs232C1EjP12USART_struct+0x114>
	}
#endif
#ifdef USARTE0
	else if(p_usart == &USARTE0)
    1a74:	00 3a       	cpi	r16, 0xA0	; 160
    1a76:	ea e0       	ldi	r30, 0x0A	; 10
    1a78:	1e 07       	cpc	r17, r30
    1a7a:	69 f4       	brne	.+26     	; 0x1a96 <_ZN5rs232C1EjP12USART_struct+0xd4>
	{
		p_rcv_buffer		= &rcvE0_buffer;
    1a7c:	8d ed       	ldi	r24, 0xDD	; 221
    1a7e:	90 e3       	ldi	r25, 0x30	; 48
    1a80:	8f 8b       	std	Y+23, r24	; 0x17
    1a82:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvE0_read_index;
    1a84:	8f ec       	ldi	r24, 0xCF	; 207
    1a86:	90 e3       	ldi	r25, 0x30	; 48
    1a88:	89 8f       	std	Y+25, r24	; 0x19
    1a8a:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvE0_write_index;
    1a8c:	81 ec       	ldi	r24, 0xC1	; 193
    1a8e:	90 e3       	ldi	r25, 0x30	; 48
    1a90:	8b 8f       	std	Y+27, r24	; 0x1b
    1a92:	9c 8f       	std	Y+28, r25	; 0x1c
    1a94:	20 c0       	rjmp	.+64     	; 0x1ad6 <_ZN5rs232C1EjP12USART_struct+0x114>
	}
#endif
#ifdef USARTE1
	else if(p_usart == &USARTE1)
    1a96:	00 3b       	cpi	r16, 0xB0	; 176
    1a98:	fa e0       	ldi	r31, 0x0A	; 10
    1a9a:	1f 07       	cpc	r17, r31
    1a9c:	69 f4       	brne	.+26     	; 0x1ab8 <_ZN5rs232C1EjP12USART_struct+0xf6>
	{
		p_rcv_buffer		= &rcvE1_buffer;
    1a9e:	8b ed       	ldi	r24, 0xDB	; 219
    1aa0:	90 e3       	ldi	r25, 0x30	; 48
    1aa2:	8f 8b       	std	Y+23, r24	; 0x17
    1aa4:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvE1_read_index;
    1aa6:	8d ec       	ldi	r24, 0xCD	; 205
    1aa8:	90 e3       	ldi	r25, 0x30	; 48
    1aaa:	89 8f       	std	Y+25, r24	; 0x19
    1aac:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvE1_write_index;
    1aae:	8f eb       	ldi	r24, 0xBF	; 191
    1ab0:	90 e3       	ldi	r25, 0x30	; 48
    1ab2:	8b 8f       	std	Y+27, r24	; 0x1b
    1ab4:	9c 8f       	std	Y+28, r25	; 0x1c
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <_ZN5rs232C1EjP12USART_struct+0x114>
	}
#endif
#ifdef USARTF0
	else if(p_usart == &USARTF0)
    1ab8:	00 3a       	cpi	r16, 0xA0	; 160
    1aba:	1b 40       	sbci	r17, 0x0B	; 11
    1abc:	61 f4       	brne	.+24     	; 0x1ad6 <_ZN5rs232C1EjP12USART_struct+0x114>
	{
		p_rcv_buffer		= &rcvF0_buffer;
    1abe:	89 ed       	ldi	r24, 0xD9	; 217
    1ac0:	90 e3       	ldi	r25, 0x30	; 48
    1ac2:	8f 8b       	std	Y+23, r24	; 0x17
    1ac4:	98 8f       	std	Y+24, r25	; 0x18
		p_rcv_read_index	= &rcvF0_read_index;
    1ac6:	8b ec       	ldi	r24, 0xCB	; 203
    1ac8:	90 e3       	ldi	r25, 0x30	; 48
    1aca:	89 8f       	std	Y+25, r24	; 0x19
    1acc:	9a 8f       	std	Y+26, r25	; 0x1a
		p_rcv_write_index	= &rcvF0_write_index;
    1ace:	8d eb       	ldi	r24, 0xBD	; 189
    1ad0:	90 e3       	ldi	r25, 0x30	; 48
    1ad2:	8b 8f       	std	Y+27, r24	; 0x1b
    1ad4:	9c 8f       	std	Y+28, r25	; 0x1c
#endif
	else
	{
	}
	
	*p_rcv_buffer = new uint8_t[RSINT_BUF_SIZE];
    1ad6:	0f 89       	ldd	r16, Y+23	; 0x17
    1ad8:	18 8d       	ldd	r17, Y+24	; 0x18
    1ada:	84 e6       	ldi	r24, 0x64	; 100
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_Znaj>
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	80 83       	st	Z, r24
    1ae6:	91 83       	std	Z+1, r25	; 0x01
	*p_rcv_read_index = 0;
    1ae8:	e9 8d       	ldd	r30, Y+25	; 0x19
    1aea:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1aec:	10 82       	st	Z, r1
    1aee:	11 82       	std	Z+1, r1	; 0x01
	*p_rcv_write_index = 0;
    1af0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1af2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1af4:	10 82       	st	Z, r1
    1af6:	11 82       	std	Z+1, r1	; 0x01
}
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	08 95       	ret

00001b06 <__vector_25>:
 *  first serial port (number 0).  It saves that character into the receiver buffer.
 */

#ifdef USARTC0_RXC_vect
ISR (USARTC0_RXC_vect)
{
    1b06:	1f 92       	push	r1
    1b08:	0f 92       	push	r0
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	0f 92       	push	r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	08 b6       	in	r0, 0x38	; 56
    1b12:	0f 92       	push	r0
    1b14:	18 be       	out	0x38, r1	; 56
    1b16:	0b b6       	in	r0, 0x3b	; 59
    1b18:	0f 92       	push	r0
    1b1a:	1b be       	out	0x3b, r1	; 59
    1b1c:	2f 93       	push	r18
    1b1e:	3f 93       	push	r19
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	ef 93       	push	r30
    1b26:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvC0_buffer[rcvC0_write_index] = USARTC0.DATA;
    1b28:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1b2c:	e0 91 e5 30 	lds	r30, 0x30E5	; 0x8030e5 <rcvC0_buffer>
    1b30:	f0 91 e6 30 	lds	r31, 0x30E6	; 0x8030e6 <rcvC0_buffer+0x1>
    1b34:	80 91 c9 30 	lds	r24, 0x30C9	; 0x8030c9 <rcvC0_write_index>
    1b38:	90 91 ca 30 	lds	r25, 0x30CA	; 0x8030ca <rcvC0_write_index+0x1>
    1b3c:	e8 0f       	add	r30, r24
    1b3e:	f9 1f       	adc	r31, r25
    1b40:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvC0_write_index >= RSINT_BUF_SIZE)
    1b42:	80 91 c9 30 	lds	r24, 0x30C9	; 0x8030c9 <rcvC0_write_index>
    1b46:	90 91 ca 30 	lds	r25, 0x30CA	; 0x8030ca <rcvC0_write_index+0x1>
    1b4a:	01 96       	adiw	r24, 0x01	; 1
    1b4c:	84 36       	cpi	r24, 0x64	; 100
    1b4e:	91 05       	cpc	r25, r1
    1b50:	60 f4       	brcc	.+24     	; 0x1b6a <__vector_25+0x64>
    1b52:	80 93 c9 30 	sts	0x30C9, r24	; 0x8030c9 <rcvC0_write_index>
    1b56:	90 93 ca 30 	sts	0x30CA, r25	; 0x8030ca <rcvC0_write_index+0x1>
		rcvC0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
    1b5a:	20 91 d7 30 	lds	r18, 0x30D7	; 0x8030d7 <rcvC0_read_index>
    1b5e:	30 91 d8 30 	lds	r19, 0x30D8	; 0x8030d8 <rcvC0_read_index+0x1>
    1b62:	82 17       	cp	r24, r18
    1b64:	93 07       	cpc	r25, r19
    1b66:	f1 f4       	brne	.+60     	; 0x1ba4 <__vector_25+0x9e>
    1b68:	0c c0       	rjmp	.+24     	; 0x1b82 <__vector_25+0x7c>

	rcvC0_buffer[rcvC0_write_index] = USARTC0.DATA;

	// Increment the write pointer
	if (++rcvC0_write_index >= RSINT_BUF_SIZE)
		rcvC0_write_index = 0;
    1b6a:	10 92 c9 30 	sts	0x30C9, r1	; 0x8030c9 <rcvC0_write_index>
    1b6e:	10 92 ca 30 	sts	0x30CA, r1	; 0x8030ca <rcvC0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
    1b72:	80 91 d7 30 	lds	r24, 0x30D7	; 0x8030d7 <rcvC0_read_index>
    1b76:	90 91 d8 30 	lds	r25, 0x30D8	; 0x8030d8 <rcvC0_read_index+0x1>
    1b7a:	18 16       	cp	r1, r24
    1b7c:	19 06       	cpc	r1, r25
    1b7e:	91 f4       	brne	.+36     	; 0x1ba4 <__vector_25+0x9e>
    1b80:	0e c0       	rjmp	.+28     	; 0x1b9e <__vector_25+0x98>
		if (++rcvC0_read_index >= RSINT_BUF_SIZE)
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	84 36       	cpi	r24, 0x64	; 100
    1b86:	91 05       	cpc	r25, r1
    1b88:	28 f4       	brcc	.+10     	; 0x1b94 <__vector_25+0x8e>
    1b8a:	80 93 d7 30 	sts	0x30D7, r24	; 0x8030d7 <rcvC0_read_index>
    1b8e:	90 93 d8 30 	sts	0x30D8, r25	; 0x8030d8 <rcvC0_read_index+0x1>
    1b92:	08 c0       	rjmp	.+16     	; 0x1ba4 <__vector_25+0x9e>
			rcvC0_read_index = 0;
    1b94:	10 92 d7 30 	sts	0x30D7, r1	; 0x8030d7 <rcvC0_read_index>
    1b98:	10 92 d8 30 	sts	0x30D8, r1	; 0x8030d8 <rcvC0_read_index+0x1>
}
    1b9c:	03 c0       	rjmp	.+6      	; 0x1ba4 <__vector_25+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC0_write_index == rcvC0_read_index)
		if (++rcvC0_read_index >= RSINT_BUF_SIZE)
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	f3 cf       	rjmp	.-26     	; 0x1b8a <__vector_25+0x84>
			rcvC0_read_index = 0;
}
    1ba4:	ff 91       	pop	r31
    1ba6:	ef 91       	pop	r30
    1ba8:	9f 91       	pop	r25
    1baa:	8f 91       	pop	r24
    1bac:	3f 91       	pop	r19
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0b be       	out	0x3b, r0	; 59
    1bb4:	0f 90       	pop	r0
    1bb6:	08 be       	out	0x38, r0	; 56
    1bb8:	0f 90       	pop	r0
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	0f 90       	pop	r0
    1bbe:	1f 90       	pop	r1
    1bc0:	18 95       	reti

00001bc2 <__vector_28>:
#endif

#ifdef USARTC1_RXC_vect
ISR (USARTC1_RXC_vect)
{
    1bc2:	1f 92       	push	r1
    1bc4:	0f 92       	push	r0
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	0f 92       	push	r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	08 b6       	in	r0, 0x38	; 56
    1bce:	0f 92       	push	r0
    1bd0:	18 be       	out	0x38, r1	; 56
    1bd2:	0b b6       	in	r0, 0x3b	; 59
    1bd4:	0f 92       	push	r0
    1bd6:	1b be       	out	0x3b, r1	; 59
    1bd8:	2f 93       	push	r18
    1bda:	3f 93       	push	r19
    1bdc:	8f 93       	push	r24
    1bde:	9f 93       	push	r25
    1be0:	ef 93       	push	r30
    1be2:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvC1_buffer[rcvC1_write_index] = USARTC1.DATA;
    1be4:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <__TEXT_REGION_LENGTH__+0x7008b0>
    1be8:	e0 91 e3 30 	lds	r30, 0x30E3	; 0x8030e3 <rcvC1_buffer>
    1bec:	f0 91 e4 30 	lds	r31, 0x30E4	; 0x8030e4 <rcvC1_buffer+0x1>
    1bf0:	80 91 c7 30 	lds	r24, 0x30C7	; 0x8030c7 <rcvC1_write_index>
    1bf4:	90 91 c8 30 	lds	r25, 0x30C8	; 0x8030c8 <rcvC1_write_index+0x1>
    1bf8:	e8 0f       	add	r30, r24
    1bfa:	f9 1f       	adc	r31, r25
    1bfc:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvC1_write_index >= RSINT_BUF_SIZE)
    1bfe:	80 91 c7 30 	lds	r24, 0x30C7	; 0x8030c7 <rcvC1_write_index>
    1c02:	90 91 c8 30 	lds	r25, 0x30C8	; 0x8030c8 <rcvC1_write_index+0x1>
    1c06:	01 96       	adiw	r24, 0x01	; 1
    1c08:	84 36       	cpi	r24, 0x64	; 100
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	60 f4       	brcc	.+24     	; 0x1c26 <__vector_28+0x64>
    1c0e:	80 93 c7 30 	sts	0x30C7, r24	; 0x8030c7 <rcvC1_write_index>
    1c12:	90 93 c8 30 	sts	0x30C8, r25	; 0x8030c8 <rcvC1_write_index+0x1>
	rcvC1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
    1c16:	20 91 d5 30 	lds	r18, 0x30D5	; 0x8030d5 <rcvC1_read_index>
    1c1a:	30 91 d6 30 	lds	r19, 0x30D6	; 0x8030d6 <rcvC1_read_index+0x1>
    1c1e:	82 17       	cp	r24, r18
    1c20:	93 07       	cpc	r25, r19
    1c22:	f1 f4       	brne	.+60     	; 0x1c60 <__vector_28+0x9e>
    1c24:	0c c0       	rjmp	.+24     	; 0x1c3e <__vector_28+0x7c>

	rcvC1_buffer[rcvC1_write_index] = USARTC1.DATA;

	// Increment the write pointer
	if (++rcvC1_write_index >= RSINT_BUF_SIZE)
	rcvC1_write_index = 0;
    1c26:	10 92 c7 30 	sts	0x30C7, r1	; 0x8030c7 <rcvC1_write_index>
    1c2a:	10 92 c8 30 	sts	0x30C8, r1	; 0x8030c8 <rcvC1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
    1c2e:	80 91 d5 30 	lds	r24, 0x30D5	; 0x8030d5 <rcvC1_read_index>
    1c32:	90 91 d6 30 	lds	r25, 0x30D6	; 0x8030d6 <rcvC1_read_index+0x1>
    1c36:	18 16       	cp	r1, r24
    1c38:	19 06       	cpc	r1, r25
    1c3a:	91 f4       	brne	.+36     	; 0x1c60 <__vector_28+0x9e>
    1c3c:	0e c0       	rjmp	.+28     	; 0x1c5a <__vector_28+0x98>
	if (++rcvC1_read_index >= RSINT_BUF_SIZE)
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	84 36       	cpi	r24, 0x64	; 100
    1c42:	91 05       	cpc	r25, r1
    1c44:	28 f4       	brcc	.+10     	; 0x1c50 <__vector_28+0x8e>
    1c46:	80 93 d5 30 	sts	0x30D5, r24	; 0x8030d5 <rcvC1_read_index>
    1c4a:	90 93 d6 30 	sts	0x30D6, r25	; 0x8030d6 <rcvC1_read_index+0x1>
    1c4e:	08 c0       	rjmp	.+16     	; 0x1c60 <__vector_28+0x9e>
	rcvC1_read_index = 0;
    1c50:	10 92 d5 30 	sts	0x30D5, r1	; 0x8030d5 <rcvC1_read_index>
    1c54:	10 92 d6 30 	sts	0x30D6, r1	; 0x8030d6 <rcvC1_read_index+0x1>
}
    1c58:	03 c0       	rjmp	.+6      	; 0x1c60 <__vector_28+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvC1_write_index == rcvC1_read_index)
	if (++rcvC1_read_index >= RSINT_BUF_SIZE)
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	f3 cf       	rjmp	.-26     	; 0x1c46 <__vector_28+0x84>
	rcvC1_read_index = 0;
}
    1c60:	ff 91       	pop	r31
    1c62:	ef 91       	pop	r30
    1c64:	9f 91       	pop	r25
    1c66:	8f 91       	pop	r24
    1c68:	3f 91       	pop	r19
    1c6a:	2f 91       	pop	r18
    1c6c:	0f 90       	pop	r0
    1c6e:	0b be       	out	0x3b, r0	; 59
    1c70:	0f 90       	pop	r0
    1c72:	08 be       	out	0x38, r0	; 56
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	0f 90       	pop	r0
    1c7a:	1f 90       	pop	r1
    1c7c:	18 95       	reti

00001c7e <__vector_88>:
#endif

#ifdef USARTD0_RXC_vect
ISR (USARTD0_RXC_vect)
{
    1c7e:	1f 92       	push	r1
    1c80:	0f 92       	push	r0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	0f 92       	push	r0
    1c86:	11 24       	eor	r1, r1
    1c88:	08 b6       	in	r0, 0x38	; 56
    1c8a:	0f 92       	push	r0
    1c8c:	18 be       	out	0x38, r1	; 56
    1c8e:	0b b6       	in	r0, 0x3b	; 59
    1c90:	0f 92       	push	r0
    1c92:	1b be       	out	0x3b, r1	; 59
    1c94:	2f 93       	push	r18
    1c96:	3f 93       	push	r19
    1c98:	8f 93       	push	r24
    1c9a:	9f 93       	push	r25
    1c9c:	ef 93       	push	r30
    1c9e:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvD0_buffer[rcvC0_write_index] = USARTD0.DATA;
    1ca0:	20 91 a0 09 	lds	r18, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    1ca4:	e0 91 e1 30 	lds	r30, 0x30E1	; 0x8030e1 <rcvD0_buffer>
    1ca8:	f0 91 e2 30 	lds	r31, 0x30E2	; 0x8030e2 <rcvD0_buffer+0x1>
    1cac:	80 91 c9 30 	lds	r24, 0x30C9	; 0x8030c9 <rcvC0_write_index>
    1cb0:	90 91 ca 30 	lds	r25, 0x30CA	; 0x8030ca <rcvC0_write_index+0x1>
    1cb4:	e8 0f       	add	r30, r24
    1cb6:	f9 1f       	adc	r31, r25
    1cb8:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvD0_write_index >= RSINT_BUF_SIZE)
    1cba:	80 91 c5 30 	lds	r24, 0x30C5	; 0x8030c5 <rcvD0_write_index>
    1cbe:	90 91 c6 30 	lds	r25, 0x30C6	; 0x8030c6 <rcvD0_write_index+0x1>
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	84 36       	cpi	r24, 0x64	; 100
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	60 f4       	brcc	.+24     	; 0x1ce2 <__vector_88+0x64>
    1cca:	80 93 c5 30 	sts	0x30C5, r24	; 0x8030c5 <rcvD0_write_index>
    1cce:	90 93 c6 30 	sts	0x30C6, r25	; 0x8030c6 <rcvD0_write_index+0x1>
	rcvD0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
    1cd2:	20 91 d3 30 	lds	r18, 0x30D3	; 0x8030d3 <rcvD0_read_index>
    1cd6:	30 91 d4 30 	lds	r19, 0x30D4	; 0x8030d4 <rcvD0_read_index+0x1>
    1cda:	82 17       	cp	r24, r18
    1cdc:	93 07       	cpc	r25, r19
    1cde:	f1 f4       	brne	.+60     	; 0x1d1c <__vector_88+0x9e>
    1ce0:	0c c0       	rjmp	.+24     	; 0x1cfa <__vector_88+0x7c>

	rcvD0_buffer[rcvC0_write_index] = USARTD0.DATA;

	// Increment the write pointer
	if (++rcvD0_write_index >= RSINT_BUF_SIZE)
	rcvD0_write_index = 0;
    1ce2:	10 92 c5 30 	sts	0x30C5, r1	; 0x8030c5 <rcvD0_write_index>
    1ce6:	10 92 c6 30 	sts	0x30C6, r1	; 0x8030c6 <rcvD0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
    1cea:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <rcvD0_read_index>
    1cee:	90 91 d4 30 	lds	r25, 0x30D4	; 0x8030d4 <rcvD0_read_index+0x1>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	19 06       	cpc	r1, r25
    1cf6:	91 f4       	brne	.+36     	; 0x1d1c <__vector_88+0x9e>
    1cf8:	0e c0       	rjmp	.+28     	; 0x1d16 <__vector_88+0x98>
	if (++rcvD0_read_index >= RSINT_BUF_SIZE)
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	84 36       	cpi	r24, 0x64	; 100
    1cfe:	91 05       	cpc	r25, r1
    1d00:	28 f4       	brcc	.+10     	; 0x1d0c <__vector_88+0x8e>
    1d02:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <rcvD0_read_index>
    1d06:	90 93 d4 30 	sts	0x30D4, r25	; 0x8030d4 <rcvD0_read_index+0x1>
    1d0a:	08 c0       	rjmp	.+16     	; 0x1d1c <__vector_88+0x9e>
	rcvD0_read_index = 0;
    1d0c:	10 92 d3 30 	sts	0x30D3, r1	; 0x8030d3 <rcvD0_read_index>
    1d10:	10 92 d4 30 	sts	0x30D4, r1	; 0x8030d4 <rcvD0_read_index+0x1>
}
    1d14:	03 c0       	rjmp	.+6      	; 0x1d1c <__vector_88+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD0_write_index == rcvD0_read_index)
	if (++rcvD0_read_index >= RSINT_BUF_SIZE)
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	f3 cf       	rjmp	.-26     	; 0x1d02 <__vector_88+0x84>
	rcvD0_read_index = 0;
}
    1d1c:	ff 91       	pop	r31
    1d1e:	ef 91       	pop	r30
    1d20:	9f 91       	pop	r25
    1d22:	8f 91       	pop	r24
    1d24:	3f 91       	pop	r19
    1d26:	2f 91       	pop	r18
    1d28:	0f 90       	pop	r0
    1d2a:	0b be       	out	0x3b, r0	; 59
    1d2c:	0f 90       	pop	r0
    1d2e:	08 be       	out	0x38, r0	; 56
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	0f 90       	pop	r0
    1d36:	1f 90       	pop	r1
    1d38:	18 95       	reti

00001d3a <__vector_91>:
#endif

#ifdef USARTD1_RXC_vect
ISR (USARTD1_RXC_vect)
{
    1d3a:	1f 92       	push	r1
    1d3c:	0f 92       	push	r0
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	0f 92       	push	r0
    1d42:	11 24       	eor	r1, r1
    1d44:	08 b6       	in	r0, 0x38	; 56
    1d46:	0f 92       	push	r0
    1d48:	18 be       	out	0x38, r1	; 56
    1d4a:	0b b6       	in	r0, 0x3b	; 59
    1d4c:	0f 92       	push	r0
    1d4e:	1b be       	out	0x3b, r1	; 59
    1d50:	2f 93       	push	r18
    1d52:	3f 93       	push	r19
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	ef 93       	push	r30
    1d5a:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvD1_buffer[rcvD1_write_index] = USARTD1.DATA;
    1d5c:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    1d60:	e0 91 df 30 	lds	r30, 0x30DF	; 0x8030df <rcvD1_buffer>
    1d64:	f0 91 e0 30 	lds	r31, 0x30E0	; 0x8030e0 <rcvD1_buffer+0x1>
    1d68:	80 91 c3 30 	lds	r24, 0x30C3	; 0x8030c3 <rcvD1_write_index>
    1d6c:	90 91 c4 30 	lds	r25, 0x30C4	; 0x8030c4 <rcvD1_write_index+0x1>
    1d70:	e8 0f       	add	r30, r24
    1d72:	f9 1f       	adc	r31, r25
    1d74:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvD1_write_index >= RSINT_BUF_SIZE)
    1d76:	80 91 c3 30 	lds	r24, 0x30C3	; 0x8030c3 <rcvD1_write_index>
    1d7a:	90 91 c4 30 	lds	r25, 0x30C4	; 0x8030c4 <rcvD1_write_index+0x1>
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	84 36       	cpi	r24, 0x64	; 100
    1d82:	91 05       	cpc	r25, r1
    1d84:	60 f4       	brcc	.+24     	; 0x1d9e <__vector_91+0x64>
    1d86:	80 93 c3 30 	sts	0x30C3, r24	; 0x8030c3 <rcvD1_write_index>
    1d8a:	90 93 c4 30 	sts	0x30C4, r25	; 0x8030c4 <rcvD1_write_index+0x1>
	rcvD1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
    1d8e:	20 91 d1 30 	lds	r18, 0x30D1	; 0x8030d1 <rcvD1_read_index>
    1d92:	30 91 d2 30 	lds	r19, 0x30D2	; 0x8030d2 <rcvD1_read_index+0x1>
    1d96:	82 17       	cp	r24, r18
    1d98:	93 07       	cpc	r25, r19
    1d9a:	f1 f4       	brne	.+60     	; 0x1dd8 <__vector_91+0x9e>
    1d9c:	0c c0       	rjmp	.+24     	; 0x1db6 <__vector_91+0x7c>

	rcvD1_buffer[rcvD1_write_index] = USARTD1.DATA;

	// Increment the write pointer
	if (++rcvD1_write_index >= RSINT_BUF_SIZE)
	rcvD1_write_index = 0;
    1d9e:	10 92 c3 30 	sts	0x30C3, r1	; 0x8030c3 <rcvD1_write_index>
    1da2:	10 92 c4 30 	sts	0x30C4, r1	; 0x8030c4 <rcvD1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
    1da6:	80 91 d1 30 	lds	r24, 0x30D1	; 0x8030d1 <rcvD1_read_index>
    1daa:	90 91 d2 30 	lds	r25, 0x30D2	; 0x8030d2 <rcvD1_read_index+0x1>
    1dae:	18 16       	cp	r1, r24
    1db0:	19 06       	cpc	r1, r25
    1db2:	91 f4       	brne	.+36     	; 0x1dd8 <__vector_91+0x9e>
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <__vector_91+0x98>
	if (++rcvD1_read_index >= RSINT_BUF_SIZE)
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	84 36       	cpi	r24, 0x64	; 100
    1dba:	91 05       	cpc	r25, r1
    1dbc:	28 f4       	brcc	.+10     	; 0x1dc8 <__vector_91+0x8e>
    1dbe:	80 93 d1 30 	sts	0x30D1, r24	; 0x8030d1 <rcvD1_read_index>
    1dc2:	90 93 d2 30 	sts	0x30D2, r25	; 0x8030d2 <rcvD1_read_index+0x1>
    1dc6:	08 c0       	rjmp	.+16     	; 0x1dd8 <__vector_91+0x9e>
	rcvD1_read_index = 0;
    1dc8:	10 92 d1 30 	sts	0x30D1, r1	; 0x8030d1 <rcvD1_read_index>
    1dcc:	10 92 d2 30 	sts	0x30D2, r1	; 0x8030d2 <rcvD1_read_index+0x1>
}
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <__vector_91+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvD1_write_index == rcvD1_read_index)
	if (++rcvD1_read_index >= RSINT_BUF_SIZE)
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	f3 cf       	rjmp	.-26     	; 0x1dbe <__vector_91+0x84>
	rcvD1_read_index = 0;
}
    1dd8:	ff 91       	pop	r31
    1dda:	ef 91       	pop	r30
    1ddc:	9f 91       	pop	r25
    1dde:	8f 91       	pop	r24
    1de0:	3f 91       	pop	r19
    1de2:	2f 91       	pop	r18
    1de4:	0f 90       	pop	r0
    1de6:	0b be       	out	0x3b, r0	; 59
    1de8:	0f 90       	pop	r0
    1dea:	08 be       	out	0x38, r0	; 56
    1dec:	0f 90       	pop	r0
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	0f 90       	pop	r0
    1df2:	1f 90       	pop	r1
    1df4:	18 95       	reti

00001df6 <__vector_58>:
#endif

#ifdef USARTE0_RXC_vect
ISR (USARTE0_RXC_vect)
{
    1df6:	1f 92       	push	r1
    1df8:	0f 92       	push	r0
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	0f 92       	push	r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	08 b6       	in	r0, 0x38	; 56
    1e02:	0f 92       	push	r0
    1e04:	18 be       	out	0x38, r1	; 56
    1e06:	0b b6       	in	r0, 0x3b	; 59
    1e08:	0f 92       	push	r0
    1e0a:	1b be       	out	0x3b, r1	; 59
    1e0c:	2f 93       	push	r18
    1e0e:	3f 93       	push	r19
    1e10:	8f 93       	push	r24
    1e12:	9f 93       	push	r25
    1e14:	ef 93       	push	r30
    1e16:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvE0_buffer[rcvE0_write_index] = USARTE0.DATA;
    1e18:	20 91 a0 0a 	lds	r18, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    1e1c:	e0 91 dd 30 	lds	r30, 0x30DD	; 0x8030dd <rcvE0_buffer>
    1e20:	f0 91 de 30 	lds	r31, 0x30DE	; 0x8030de <rcvE0_buffer+0x1>
    1e24:	80 91 c1 30 	lds	r24, 0x30C1	; 0x8030c1 <rcvE0_write_index>
    1e28:	90 91 c2 30 	lds	r25, 0x30C2	; 0x8030c2 <rcvE0_write_index+0x1>
    1e2c:	e8 0f       	add	r30, r24
    1e2e:	f9 1f       	adc	r31, r25
    1e30:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvE0_write_index >= RSINT_BUF_SIZE)
    1e32:	80 91 c1 30 	lds	r24, 0x30C1	; 0x8030c1 <rcvE0_write_index>
    1e36:	90 91 c2 30 	lds	r25, 0x30C2	; 0x8030c2 <rcvE0_write_index+0x1>
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	84 36       	cpi	r24, 0x64	; 100
    1e3e:	91 05       	cpc	r25, r1
    1e40:	60 f4       	brcc	.+24     	; 0x1e5a <__vector_58+0x64>
    1e42:	80 93 c1 30 	sts	0x30C1, r24	; 0x8030c1 <rcvE0_write_index>
    1e46:	90 93 c2 30 	sts	0x30C2, r25	; 0x8030c2 <rcvE0_write_index+0x1>
	rcvE0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
    1e4a:	20 91 cf 30 	lds	r18, 0x30CF	; 0x8030cf <rcvE0_read_index>
    1e4e:	30 91 d0 30 	lds	r19, 0x30D0	; 0x8030d0 <rcvE0_read_index+0x1>
    1e52:	82 17       	cp	r24, r18
    1e54:	93 07       	cpc	r25, r19
    1e56:	f1 f4       	brne	.+60     	; 0x1e94 <__vector_58+0x9e>
    1e58:	0c c0       	rjmp	.+24     	; 0x1e72 <__vector_58+0x7c>

	rcvE0_buffer[rcvE0_write_index] = USARTE0.DATA;

	// Increment the write pointer
	if (++rcvE0_write_index >= RSINT_BUF_SIZE)
	rcvE0_write_index = 0;
    1e5a:	10 92 c1 30 	sts	0x30C1, r1	; 0x8030c1 <rcvE0_write_index>
    1e5e:	10 92 c2 30 	sts	0x30C2, r1	; 0x8030c2 <rcvE0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
    1e62:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <rcvE0_read_index>
    1e66:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <rcvE0_read_index+0x1>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	19 06       	cpc	r1, r25
    1e6e:	91 f4       	brne	.+36     	; 0x1e94 <__vector_58+0x9e>
    1e70:	0e c0       	rjmp	.+28     	; 0x1e8e <__vector_58+0x98>
	if (++rcvE0_read_index >= RSINT_BUF_SIZE)
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	84 36       	cpi	r24, 0x64	; 100
    1e76:	91 05       	cpc	r25, r1
    1e78:	28 f4       	brcc	.+10     	; 0x1e84 <__vector_58+0x8e>
    1e7a:	80 93 cf 30 	sts	0x30CF, r24	; 0x8030cf <rcvE0_read_index>
    1e7e:	90 93 d0 30 	sts	0x30D0, r25	; 0x8030d0 <rcvE0_read_index+0x1>
    1e82:	08 c0       	rjmp	.+16     	; 0x1e94 <__vector_58+0x9e>
	rcvE0_read_index = 0;
    1e84:	10 92 cf 30 	sts	0x30CF, r1	; 0x8030cf <rcvE0_read_index>
    1e88:	10 92 d0 30 	sts	0x30D0, r1	; 0x8030d0 <rcvE0_read_index+0x1>
}
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <__vector_58+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE0_write_index == rcvE0_read_index)
	if (++rcvE0_read_index >= RSINT_BUF_SIZE)
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	f3 cf       	rjmp	.-26     	; 0x1e7a <__vector_58+0x84>
	rcvE0_read_index = 0;
}
    1e94:	ff 91       	pop	r31
    1e96:	ef 91       	pop	r30
    1e98:	9f 91       	pop	r25
    1e9a:	8f 91       	pop	r24
    1e9c:	3f 91       	pop	r19
    1e9e:	2f 91       	pop	r18
    1ea0:	0f 90       	pop	r0
    1ea2:	0b be       	out	0x3b, r0	; 59
    1ea4:	0f 90       	pop	r0
    1ea6:	08 be       	out	0x38, r0	; 56
    1ea8:	0f 90       	pop	r0
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	0f 90       	pop	r0
    1eae:	1f 90       	pop	r1
    1eb0:	18 95       	reti

00001eb2 <__vector_61>:
#endif

#ifdef USARTE1_RXC_vect
ISR (USARTE1_RXC_vect)
{
    1eb2:	1f 92       	push	r1
    1eb4:	0f 92       	push	r0
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	0f 92       	push	r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	08 b6       	in	r0, 0x38	; 56
    1ebe:	0f 92       	push	r0
    1ec0:	18 be       	out	0x38, r1	; 56
    1ec2:	0b b6       	in	r0, 0x3b	; 59
    1ec4:	0f 92       	push	r0
    1ec6:	1b be       	out	0x3b, r1	; 59
    1ec8:	2f 93       	push	r18
    1eca:	3f 93       	push	r19
    1ecc:	8f 93       	push	r24
    1ece:	9f 93       	push	r25
    1ed0:	ef 93       	push	r30
    1ed2:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvE1_buffer[rcvE1_write_index] = USARTE1.DATA;
    1ed4:	20 91 b0 0a 	lds	r18, 0x0AB0	; 0x800ab0 <__TEXT_REGION_LENGTH__+0x700ab0>
    1ed8:	e0 91 db 30 	lds	r30, 0x30DB	; 0x8030db <rcvE1_buffer>
    1edc:	f0 91 dc 30 	lds	r31, 0x30DC	; 0x8030dc <rcvE1_buffer+0x1>
    1ee0:	80 91 bf 30 	lds	r24, 0x30BF	; 0x8030bf <rcvE1_write_index>
    1ee4:	90 91 c0 30 	lds	r25, 0x30C0	; 0x8030c0 <rcvE1_write_index+0x1>
    1ee8:	e8 0f       	add	r30, r24
    1eea:	f9 1f       	adc	r31, r25
    1eec:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvE1_write_index >= RSINT_BUF_SIZE)
    1eee:	80 91 bf 30 	lds	r24, 0x30BF	; 0x8030bf <rcvE1_write_index>
    1ef2:	90 91 c0 30 	lds	r25, 0x30C0	; 0x8030c0 <rcvE1_write_index+0x1>
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	84 36       	cpi	r24, 0x64	; 100
    1efa:	91 05       	cpc	r25, r1
    1efc:	60 f4       	brcc	.+24     	; 0x1f16 <__vector_61+0x64>
    1efe:	80 93 bf 30 	sts	0x30BF, r24	; 0x8030bf <rcvE1_write_index>
    1f02:	90 93 c0 30 	sts	0x30C0, r25	; 0x8030c0 <rcvE1_write_index+0x1>
	rcvE1_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE1_write_index == rcvE1_read_index)
    1f06:	20 91 cd 30 	lds	r18, 0x30CD	; 0x8030cd <rcvE1_read_index>
    1f0a:	30 91 ce 30 	lds	r19, 0x30CE	; 0x8030ce <rcvE1_read_index+0x1>
    1f0e:	82 17       	cp	r24, r18
    1f10:	93 07       	cpc	r25, r19
    1f12:	f1 f4       	brne	.+60     	; 0x1f50 <__vector_61+0x9e>
    1f14:	0c c0       	rjmp	.+24     	; 0x1f2e <__vector_61+0x7c>

	rcvE1_buffer[rcvE1_write_index] = USARTE1.DATA;

	// Increment the write pointer
	if (++rcvE1_write_index >= RSINT_BUF_SIZE)
	rcvE1_write_index = 0;
    1f16:	10 92 bf 30 	sts	0x30BF, r1	; 0x8030bf <rcvE1_write_index>
    1f1a:	10 92 c0 30 	sts	0x30C0, r1	; 0x8030c0 <rcvE1_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE1_write_index == rcvE1_read_index)
    1f1e:	80 91 cd 30 	lds	r24, 0x30CD	; 0x8030cd <rcvE1_read_index>
    1f22:	90 91 ce 30 	lds	r25, 0x30CE	; 0x8030ce <rcvE1_read_index+0x1>
    1f26:	18 16       	cp	r1, r24
    1f28:	19 06       	cpc	r1, r25
    1f2a:	91 f4       	brne	.+36     	; 0x1f50 <__vector_61+0x9e>
    1f2c:	0e c0       	rjmp	.+28     	; 0x1f4a <__vector_61+0x98>
	if (++rcvE1_read_index >= RSINT_BUF_SIZE)
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	84 36       	cpi	r24, 0x64	; 100
    1f32:	91 05       	cpc	r25, r1
    1f34:	28 f4       	brcc	.+10     	; 0x1f40 <__vector_61+0x8e>
    1f36:	80 93 cd 30 	sts	0x30CD, r24	; 0x8030cd <rcvE1_read_index>
    1f3a:	90 93 ce 30 	sts	0x30CE, r25	; 0x8030ce <rcvE1_read_index+0x1>
    1f3e:	08 c0       	rjmp	.+16     	; 0x1f50 <__vector_61+0x9e>
	rcvE1_read_index = 0;
    1f40:	10 92 cd 30 	sts	0x30CD, r1	; 0x8030cd <rcvE1_read_index>
    1f44:	10 92 ce 30 	sts	0x30CE, r1	; 0x8030ce <rcvE1_read_index+0x1>
}
    1f48:	03 c0       	rjmp	.+6      	; 0x1f50 <__vector_61+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvE1_write_index == rcvE1_read_index)
	if (++rcvE1_read_index >= RSINT_BUF_SIZE)
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	f3 cf       	rjmp	.-26     	; 0x1f36 <__vector_61+0x84>
	rcvE1_read_index = 0;
}
    1f50:	ff 91       	pop	r31
    1f52:	ef 91       	pop	r30
    1f54:	9f 91       	pop	r25
    1f56:	8f 91       	pop	r24
    1f58:	3f 91       	pop	r19
    1f5a:	2f 91       	pop	r18
    1f5c:	0f 90       	pop	r0
    1f5e:	0b be       	out	0x3b, r0	; 59
    1f60:	0f 90       	pop	r0
    1f62:	08 be       	out	0x38, r0	; 56
    1f64:	0f 90       	pop	r0
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	0f 90       	pop	r0
    1f6a:	1f 90       	pop	r1
    1f6c:	18 95       	reti

00001f6e <__vector_119>:
#endif

#ifdef USARTF0_RXC_vect
ISR (USARTF0_RXC_vect)
{
    1f6e:	1f 92       	push	r1
    1f70:	0f 92       	push	r0
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	0f 92       	push	r0
    1f76:	11 24       	eor	r1, r1
    1f78:	08 b6       	in	r0, 0x38	; 56
    1f7a:	0f 92       	push	r0
    1f7c:	18 be       	out	0x38, r1	; 56
    1f7e:	0b b6       	in	r0, 0x3b	; 59
    1f80:	0f 92       	push	r0
    1f82:	1b be       	out	0x3b, r1	; 59
    1f84:	2f 93       	push	r18
    1f86:	3f 93       	push	r19
    1f88:	8f 93       	push	r24
    1f8a:	9f 93       	push	r25
    1f8c:	ef 93       	push	r30
    1f8e:	ff 93       	push	r31
	// When this ISR is triggered, there's a character waiting in the USART data reg-
	// ister, and the write index indexes the place where that character should go

	rcvF0_buffer[rcvF0_write_index] = USARTF0.DATA;
    1f90:	20 91 a0 0b 	lds	r18, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    1f94:	e0 91 d9 30 	lds	r30, 0x30D9	; 0x8030d9 <rcvF0_buffer>
    1f98:	f0 91 da 30 	lds	r31, 0x30DA	; 0x8030da <rcvF0_buffer+0x1>
    1f9c:	80 91 bd 30 	lds	r24, 0x30BD	; 0x8030bd <rcvF0_write_index>
    1fa0:	90 91 be 30 	lds	r25, 0x30BE	; 0x8030be <rcvF0_write_index+0x1>
    1fa4:	e8 0f       	add	r30, r24
    1fa6:	f9 1f       	adc	r31, r25
    1fa8:	20 83       	st	Z, r18

	// Increment the write pointer
	if (++rcvF0_write_index >= RSINT_BUF_SIZE)
    1faa:	80 91 bd 30 	lds	r24, 0x30BD	; 0x8030bd <rcvF0_write_index>
    1fae:	90 91 be 30 	lds	r25, 0x30BE	; 0x8030be <rcvF0_write_index+0x1>
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	84 36       	cpi	r24, 0x64	; 100
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	60 f4       	brcc	.+24     	; 0x1fd2 <__vector_119+0x64>
    1fba:	80 93 bd 30 	sts	0x30BD, r24	; 0x8030bd <rcvF0_write_index>
    1fbe:	90 93 be 30 	sts	0x30BE, r25	; 0x8030be <rcvF0_write_index+0x1>
	rcvF0_write_index = 0;

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvF0_write_index == rcvF0_read_index)
    1fc2:	20 91 cb 30 	lds	r18, 0x30CB	; 0x8030cb <rcvF0_read_index>
    1fc6:	30 91 cc 30 	lds	r19, 0x30CC	; 0x8030cc <rcvF0_read_index+0x1>
    1fca:	82 17       	cp	r24, r18
    1fcc:	93 07       	cpc	r25, r19
    1fce:	f1 f4       	brne	.+60     	; 0x200c <__vector_119+0x9e>
    1fd0:	0c c0       	rjmp	.+24     	; 0x1fea <__vector_119+0x7c>

	rcvF0_buffer[rcvF0_write_index] = USARTF0.DATA;

	// Increment the write pointer
	if (++rcvF0_write_index >= RSINT_BUF_SIZE)
	rcvF0_write_index = 0;
    1fd2:	10 92 bd 30 	sts	0x30BD, r1	; 0x8030bd <rcvF0_write_index>
    1fd6:	10 92 be 30 	sts	0x30BE, r1	; 0x8030be <rcvF0_write_index+0x1>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvF0_write_index == rcvF0_read_index)
    1fda:	80 91 cb 30 	lds	r24, 0x30CB	; 0x8030cb <rcvF0_read_index>
    1fde:	90 91 cc 30 	lds	r25, 0x30CC	; 0x8030cc <rcvF0_read_index+0x1>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	19 06       	cpc	r1, r25
    1fe6:	91 f4       	brne	.+36     	; 0x200c <__vector_119+0x9e>
    1fe8:	0e c0       	rjmp	.+28     	; 0x2006 <__vector_119+0x98>
	if (++rcvF0_read_index >= RSINT_BUF_SIZE)
    1fea:	01 96       	adiw	r24, 0x01	; 1
    1fec:	84 36       	cpi	r24, 0x64	; 100
    1fee:	91 05       	cpc	r25, r1
    1ff0:	28 f4       	brcc	.+10     	; 0x1ffc <__vector_119+0x8e>
    1ff2:	80 93 cb 30 	sts	0x30CB, r24	; 0x8030cb <rcvF0_read_index>
    1ff6:	90 93 cc 30 	sts	0x30CC, r25	; 0x8030cc <rcvF0_read_index+0x1>
    1ffa:	08 c0       	rjmp	.+16     	; 0x200c <__vector_119+0x9e>
	rcvF0_read_index = 0;
    1ffc:	10 92 cb 30 	sts	0x30CB, r1	; 0x8030cb <rcvF0_read_index>
    2000:	10 92 cc 30 	sts	0x30CC, r1	; 0x8030cc <rcvF0_read_index+0x1>
}
    2004:	03 c0       	rjmp	.+6      	; 0x200c <__vector_119+0x9e>

	// If the write pointer is now equal to the read pointer, that means we've just
	// overwritten the oldest data. Increment the read pointer so that it doesn't seem
	// as if the buffer is empty
	if (rcvF0_write_index == rcvF0_read_index)
	if (++rcvF0_read_index >= RSINT_BUF_SIZE)
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	f3 cf       	rjmp	.-26     	; 0x1ff2 <__vector_119+0x84>
	rcvF0_read_index = 0;
}
    200c:	ff 91       	pop	r31
    200e:	ef 91       	pop	r30
    2010:	9f 91       	pop	r25
    2012:	8f 91       	pop	r24
    2014:	3f 91       	pop	r19
    2016:	2f 91       	pop	r18
    2018:	0f 90       	pop	r0
    201a:	0b be       	out	0x3b, r0	; 59
    201c:	0f 90       	pop	r0
    201e:	08 be       	out	0x38, r0	; 56
    2020:	0f 90       	pop	r0
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	0f 90       	pop	r0
    2026:	1f 90       	pop	r1
    2028:	18 95       	reti

0000202a <_Z8CCPWritePVhh>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    202a:	0f 93       	push	r16
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	1f 92       	push	r1
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
	#if defined __GNUC__
	uint8_t volatile saved_sreg = SREG;
    2036:	2f b7       	in	r18, 0x3f	; 63
    2038:	29 83       	std	Y+1, r18	; 0x01
	cli();
    203a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
	#ifdef RAMPZ
	RAMPZ = 0;
    203c:	1b be       	out	0x3b, r1	; 59
	"out   %3, r16"	      "\n\t"
	"st     Z,  %1"       "\n\t"
	:
	: "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
	: "r16", "r30", "r31"
	);
    203e:	fc 01       	movw	r30, r24
    2040:	08 ed       	ldi	r16, 0xD8	; 216
    2042:	04 bf       	out	0x34, r16	; 52
    2044:	60 83       	st	Z, r22

	SREG = saved_sreg;
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	8f bf       	out	0x3f, r24	; 63
	#endif
}
    204a:	0f 90       	pop	r0
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	0f 91       	pop	r16
    2052:	08 95       	ret

00002054 <main>:
 *  reset.
 *  @return This is a real-time microcontroller program which doesn't return. Ever.
 */

int main (void)
{
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	6d 97       	sbiw	r28, 0x1d	; 29
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	de bf       	out	0x3e, r29	; 62
	//Clear any interrupts
	cli();
    2062:	f8 94       	cli
	// Configure the system clock
	{	
		// Enable the 32MHz internal RC oscillator and the external 32KHz oscillator  <-----------------------MAY NEED TO CHANGE FOR 16MHz 
		OSC.CTRL |= (1 << OSC_RC32MEN_bp);
    2064:	e0 e5       	ldi	r30, 0x50	; 80
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	82 60       	ori	r24, 0x02	; 2
    206c:	80 83       	st	Z, r24
		do {} while((OSC.STATUS & (1 << OSC_RC32MRDY_bp)) != (1 << OSC_RC32MRDY_bp));
    206e:	81 81       	ldd	r24, Z+1	; 0x01
    2070:	81 ff       	sbrs	r24, 1
    2072:	fd cf       	rjmp	.-6      	; 0x206e <main+0x1a>

		// Select the clock
		CCPWrite(&(CLK.CTRL),((CLK.CTRL & ~CLK_SCLKSEL_gm) | (1 << CLK_SCLKSEL0_bp)));
    2074:	60 91 40 00 	lds	r22, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    2078:	68 7f       	andi	r22, 0xF8	; 248
    207a:	61 60       	ori	r22, 0x01	; 1
    207c:	80 e4       	ldi	r24, 0x40	; 64
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	0e 94 15 10 	call	0x202a	; 0x202a <_Z8CCPWritePVhh>
		
		// Disable the 2MHz internal RC oscillator
		OSC.CTRL &= ~(1 << OSC_RC2MEN_bp);
    2084:	e0 e5       	ldi	r30, 0x50	; 80
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	8e 7f       	andi	r24, 0xFE	; 254
    208c:	80 83       	st	Z, r24
	}
	
	// Disable the watchdog timer unless it's needed later. This is important because
	// sometimes the watchdog timer may have been left on...and it tends to stay on	 
	wdt_disable ();
    208e:	9d ef       	ldi	r25, 0xFD	; 253
    2090:	88 ed       	ldi	r24, 0xD8	; 216
    2092:	08 b6       	in	r0, 0x38	; 56
    2094:	18 be       	out	0x38, r1	; 56
    2096:	84 bf       	out	0x34, r24	; 52
    2098:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    209c:	08 be       	out	0x38, r0	; 56

	// Configure a serial port which can be used by a task to print debugging infor-
	// mation, or to allow user interaction, or for whatever use is appropriate.  The
	// serial port will be used by the user interface task after setup is complete and
	// the task scheduler has been started by the function vTaskStartScheduler()
	rs232 ser_dev(0,&USARTC0); // Create a serial device on USART E0 with always baud = 115200
    209e:	40 ea       	ldi	r20, 0xA0	; 160
    20a0:	58 e0       	ldi	r21, 0x08	; 8
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	ce 01       	movw	r24, r28
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN5rs232C1EjP12USART_struct>
	ser_dev << clrscr << "FreeRTOS Xmega Testing Program" << endl << endl;
    20ae:	67 e0       	ldi	r22, 0x07	; 7
    20b0:	ce 01       	movw	r24, r28
    20b2:	01 96       	adiw	r24, 0x01	; 1
    20b4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN8emstreamlsE15ser_manipulator>
    20b8:	8c 01       	movw	r16, r24
		 *          reference is used to string (bad pun) printable items together with 
		 *          many "<<" operators
		 */
		emstream& operator<< (const char* p_string)
		{
			puts (p_string);
    20ba:	66 e3       	ldi	r22, 0x36	; 54
    20bc:	70 e2       	ldi	r23, 0x20	; 32
    20be:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN8emstream4putsEPKc>
    20c2:	66 e0       	ldi	r22, 0x06	; 6
    20c4:	c8 01       	movw	r24, r16
    20c6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN8emstreamlsE15ser_manipulator>
    20ca:	66 e0       	ldi	r22, 0x06	; 6
    20cc:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN8emstreamlsE15ser_manipulator>
	
	// The user interface is at low priority; it could have been run in the idle task
	// but it is desired to exercise the RTOS more thoroughly in this test program
	//new task_user ("UserInt", task_priority (0), 260, &ser_dev); <-----------------------------------------commented out to run things in main
	// Enable high level interrupts and global interrupts
	PMIC_CTRL = (1 << PMIC_HILVLEN_bp | 1 << PMIC_MEDLVLEN_bp | 1 << PMIC_LOLVLEN_bp);
    20d0:	87 e0       	ldi	r24, 0x07	; 7
    20d2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
    20d6:	78 94       	sei
	
	// Here's where the RTOS scheduler is started up. It should never exit as long as
	// power is on and the microcontroller isn't rebooted
	//vTaskStartScheduler (); <------------------------------------------------------------------------------commented out to run things in main
	
	PORTC.DIRCLR = PIN0_bm | PIN1_bm;										// Set both CHa and CHb for input
    20d8:	e0 e4       	ldi	r30, 0x40	; 64
    20da:	f6 e0       	ldi	r31, 0x06	; 6
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN0CTRL |= PORT_ISC_LEVEL_gc;									// Set low level sense for Cha
    20e0:	80 89       	ldd	r24, Z+16	; 0x10
    20e2:	83 60       	ori	r24, 0x03	; 3
    20e4:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL |= PORT_ISC_LEVEL_gc;									// Set low level sense for Chb
    20e6:	81 89       	ldd	r24, Z+17	; 0x11
    20e8:	83 60       	ori	r24, 0x03	; 3
    20ea:	81 8b       	std	Z+17, r24	; 0x11
		
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN0_gc;								// Configure CHa as a multiplexer input for event channel 0
    20ec:	e0 e8       	ldi	r30, 0x80	; 128
    20ee:	f1 e0       	ldi	r31, 0x01	; 1
    20f0:	80 e6       	ldi	r24, 0x60	; 96
    20f2:	80 83       	st	Z, r24
	EVSYS.CH0CTRL = EVSYS_QDEN_bm | EVSYS_DIGFILT_2SAMPLES_gc;				// Enable the quadrature encoder
    20f4:	89 e0       	ldi	r24, 0x09	; 9
    20f6:	80 87       	std	Z+8, r24	; 0x08
		
	TCC0.CTRLD = TC_EVACT_QDEC_gc | TC_EVSEL_CH0_gc;						// Set the quadrature decoding as the event action for the timer
    20f8:	e0 e0       	ldi	r30, 0x00	; 0
    20fa:	f8 e0       	ldi	r31, 0x08	; 8
    20fc:	88 e6       	ldi	r24, 0x68	; 104
    20fe:	83 83       	std	Z+3, r24	; 0x03
	TCC0.PER = 0xFFFF;														// Set the timer counter period 1000 cpr, = 1000*4-1 F9F
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	9f ef       	ldi	r25, 0xFF	; 255
    2104:	86 a3       	std	Z+38, r24	; 0x26
    2106:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;											// Start the timer
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	80 83       	st	Z, r24
	float x_calc;
	int16_t x;
	

	while(1){
		encoder_count = TCC0.CNT;											// get count
    210c:	e1 2c       	mov	r14, r1
    210e:	68 94       	set
    2110:	ff 24       	eor	r15, r15
    2112:	f3 f8       	bld	r15, 3
    2114:	f7 01       	movw	r30, r14
    2116:	00 a1       	ldd	r16, Z+32	; 0x20
    2118:	11 a1       	ldd	r17, Z+33	; 0x21
    211a:	65 e5       	ldi	r22, 0x55	; 85
    211c:	70 e2       	ldi	r23, 0x20	; 32
    211e:	ce 01       	movw	r24, r28
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN8emstream4putsEPKc>
		AngularPosition = AngularPositionCalc;
		//ser_dev << "Angular Position: " << AngularPosition << " [deg]" << endl;
		
		x_calc = encoder_count*3/100;		// PPMM  = (4*1000)/(pi*38)
		x = x_calc;
		ser_dev << "Linear Position: " << x << " [mm]" << endl;
    2126:	98 01       	movw	r18, r16
    2128:	22 0f       	add	r18, r18
    212a:	33 1f       	adc	r19, r19
    212c:	20 0f       	add	r18, r16
    212e:	31 1f       	adc	r19, r17
    2130:	36 95       	lsr	r19
    2132:	27 95       	ror	r18
    2134:	36 95       	lsr	r19
    2136:	27 95       	ror	r18
    2138:	ab e7       	ldi	r26, 0x7B	; 123
    213a:	b4 e1       	ldi	r27, 0x14	; 20
    213c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__umulhisi3>
    2140:	bc 01       	movw	r22, r24
    2142:	76 95       	lsr	r23
    2144:	67 95       	ror	r22
    2146:	ce 01       	movw	r24, r28
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN8emstreamlsEi>
    214e:	8c 01       	movw	r16, r24
    2150:	67 e6       	ldi	r22, 0x67	; 103
    2152:	70 e2       	ldi	r23, 0x20	; 32
    2154:	0e 94 20 0b 	call	0x1640	; 0x1640 <_ZN8emstream4putsEPKc>
    2158:	66 e0       	ldi	r22, 0x06	; 6
    215a:	c8 01       	movw	r24, r16
    215c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN8emstreamlsE15ser_manipulator>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2160:	8f e3       	ldi	r24, 0x3F	; 63
    2162:	9f e1       	ldi	r25, 0x1F	; 31
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <main+0x110>
    2168:	00 c0       	rjmp	.+0      	; 0x216a <main+0x116>
    216a:	00 00       	nop
    216c:	d3 cf       	rjmp	.-90     	; 0x2114 <main+0xc0>

0000216e <_GLOBAL__sub_I_counter>:
		
		// set dt
		_delay_ms(1);

	}
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
#include "task_user.h"                      // Header for user interface task

#include "util/delay.h"						// Header for delay

volatile int counter;
frt_text_queue print_ser_queue (32, NULL, 10);
    2172:	0a e0       	ldi	r16, 0x0A	; 10
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	50 e0       	ldi	r21, 0x00	; 0
    217e:	60 e2       	ldi	r22, 0x20	; 32
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	87 ee       	ldi	r24, 0xE7	; 231
    2184:	90 e3       	ldi	r25, 0x30	; 48
    2186:	0e 94 26 0a 	call	0x144c	; 0x144c <_ZN14frt_text_queueC1EjP8emstreamm>
		
		// set dt
		_delay_ms(1);

	}
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <__tablejump2__>:
    2190:	ee 0f       	add	r30, r30
    2192:	ff 1f       	adc	r31, r31
    2194:	88 1f       	adc	r24, r24
    2196:	8b bf       	out	0x3b, r24	; 59
    2198:	07 90       	elpm	r0, Z+
    219a:	f6 91       	elpm	r31, Z
    219c:	e0 2d       	mov	r30, r0
    219e:	1b be       	out	0x3b, r1	; 59
    21a0:	19 94       	eijmp

000021a2 <__umulhisi3>:
    21a2:	a2 9f       	mul	r26, r18
    21a4:	b0 01       	movw	r22, r0
    21a6:	b3 9f       	mul	r27, r19
    21a8:	c0 01       	movw	r24, r0
    21aa:	a3 9f       	mul	r26, r19
    21ac:	70 0d       	add	r23, r0
    21ae:	81 1d       	adc	r24, r1
    21b0:	11 24       	eor	r1, r1
    21b2:	91 1d       	adc	r25, r1
    21b4:	b2 9f       	mul	r27, r18
    21b6:	70 0d       	add	r23, r0
    21b8:	81 1d       	adc	r24, r1
    21ba:	11 24       	eor	r1, r1
    21bc:	91 1d       	adc	r25, r1
    21be:	08 95       	ret

000021c0 <memcpy>:
    21c0:	fb 01       	movw	r30, r22
    21c2:	dc 01       	movw	r26, r24
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <memcpy+0xa>
    21c6:	01 90       	ld	r0, Z+
    21c8:	0d 92       	st	X+, r0
    21ca:	41 50       	subi	r20, 0x01	; 1
    21cc:	50 40       	sbci	r21, 0x00	; 0
    21ce:	d8 f7       	brcc	.-10     	; 0x21c6 <memcpy+0x6>
    21d0:	08 95       	ret

000021d2 <__itoa_ncheck>:
    21d2:	bb 27       	eor	r27, r27
    21d4:	4a 30       	cpi	r20, 0x0A	; 10
    21d6:	31 f4       	brne	.+12     	; 0x21e4 <__itoa_ncheck+0x12>
    21d8:	99 23       	and	r25, r25
    21da:	22 f4       	brpl	.+8      	; 0x21e4 <__itoa_ncheck+0x12>
    21dc:	bd e2       	ldi	r27, 0x2D	; 45
    21de:	90 95       	com	r25
    21e0:	81 95       	neg	r24
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
    21e4:	0c 94 00 11 	jmp	0x2200	; 0x2200 <__utoa_common>

000021e8 <utoa>:
    21e8:	45 32       	cpi	r20, 0x25	; 37
    21ea:	51 05       	cpc	r21, r1
    21ec:	20 f4       	brcc	.+8      	; 0x21f6 <utoa+0xe>
    21ee:	42 30       	cpi	r20, 0x02	; 2
    21f0:	10 f0       	brcs	.+4      	; 0x21f6 <utoa+0xe>
    21f2:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__utoa_ncheck>
    21f6:	fb 01       	movw	r30, r22
    21f8:	10 82       	st	Z, r1
    21fa:	cb 01       	movw	r24, r22
    21fc:	08 95       	ret

000021fe <__utoa_ncheck>:
    21fe:	bb 27       	eor	r27, r27

00002200 <__utoa_common>:
    2200:	fb 01       	movw	r30, r22
    2202:	55 27       	eor	r21, r21
    2204:	aa 27       	eor	r26, r26
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	aa 1f       	adc	r26, r26
    220c:	a4 17       	cp	r26, r20
    220e:	10 f0       	brcs	.+4      	; 0x2214 <__utoa_common+0x14>
    2210:	a4 1b       	sub	r26, r20
    2212:	83 95       	inc	r24
    2214:	50 51       	subi	r21, 0x10	; 16
    2216:	b9 f7       	brne	.-18     	; 0x2206 <__utoa_common+0x6>
    2218:	a0 5d       	subi	r26, 0xD0	; 208
    221a:	aa 33       	cpi	r26, 0x3A	; 58
    221c:	08 f0       	brcs	.+2      	; 0x2220 <__utoa_common+0x20>
    221e:	a9 5d       	subi	r26, 0xD9	; 217
    2220:	a1 93       	st	Z+, r26
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	79 f7       	brne	.-34     	; 0x2204 <__utoa_common+0x4>
    2226:	b1 11       	cpse	r27, r1
    2228:	b1 93       	st	Z+, r27
    222a:	11 92       	st	Z+, r1
    222c:	cb 01       	movw	r24, r22
    222e:	0c 94 19 11 	jmp	0x2232	; 0x2232 <strrev>

00002232 <strrev>:
    2232:	dc 01       	movw	r26, r24
    2234:	fc 01       	movw	r30, r24
    2236:	67 2f       	mov	r22, r23
    2238:	71 91       	ld	r23, Z+
    223a:	77 23       	and	r23, r23
    223c:	e1 f7       	brne	.-8      	; 0x2236 <strrev+0x4>
    223e:	32 97       	sbiw	r30, 0x02	; 2
    2240:	04 c0       	rjmp	.+8      	; 0x224a <strrev+0x18>
    2242:	7c 91       	ld	r23, X
    2244:	6d 93       	st	X+, r22
    2246:	70 83       	st	Z, r23
    2248:	62 91       	ld	r22, -Z
    224a:	ae 17       	cp	r26, r30
    224c:	bf 07       	cpc	r27, r31
    224e:	c8 f3       	brcs	.-14     	; 0x2242 <strrev+0x10>
    2250:	08 95       	ret

00002252 <_exit>:
    2252:	f8 94       	cli

00002254 <__stop_program>:
    2254:	ff cf       	rjmp	.-2      	; 0x2254 <__stop_program>
